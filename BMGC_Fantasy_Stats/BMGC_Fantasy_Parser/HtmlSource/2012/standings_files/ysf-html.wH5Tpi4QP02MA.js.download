/* jslint sloppy:true, nomen:true, white:true, unparam:true, regexp:true*/
/*global YUI,document*/
YUI.add('ysf-html', function(Y) {
    Y.namespace('Fantasy');

    Y.Fantasy.html = {

        getNodeText: function(docNode) {
            try {
                var retText = null,
                    retNode  = docNode.childNodes[0];
                if (retNode !== null) {
                    retText = retNode.nodeValue; 
                }
                return retText;
            } catch (e) {
                return false;
            }
        },
            
        getTag: function(docObj, tag, inst) {
            var instance = inst || 0,
                ret = '', atNode;
            try {
                try {
                    atNode = docObj.getElementsByTagName(tag)[instance]; 
                } catch (e) {
                    Y.log('Error getting tag \'' + tag + '\': ' + e, 'error', 'Y.Fantasy.html.getTag'); 
                }
                if (atNode) {
                    ret = Y.Fantasy.html.getNodeText(atNode); 
                }
                ret = ret || '';
            } catch (ignore) { }
            return ret;
        },

        clearChildNodes: function(atNode, nodeType) {
            var remNodes, nodeLim, x;
            try {
                if (nodeType !== null && nodeType !== 'undefined') {
                    remNodes = atNode.getElementsByTagName(nodeType);
                } else {
                    remNodes = atNode.childNodes;
                }
                nodeLim = remNodes.length;
                for (x = 0; x<nodeLim;  x += 1) {
                    // YAHOO.util.Event.purgeElement(remNodes[0], true);
                    atNode.removeChild(remNodes[0]);
                }
            } catch (e) {
                Y.log('Error, {' + atNode + ', ' + nodeType + '} : ' + e, 'error', 'Y.Fantasy.html.clearChildNodes'); 
            }
        },

        htmlDecode: function(entityString, formatLineBreaks) {
            var tempEl = document.createElement('b'),
                enString = entityString, // eslint-disable-line no-unused-vars 
                ret;
            if (formatLineBreaks) {
                enString = enString.replace(/[\n\r]/g, '<br>');
            }
            tempEl.innerHTML = entityString;
            ret = Y.Fantasy.html.getNodeText(tempEl);
            tempEl = null;
            return ret;
        },

        NodeAssembly: function(baseEl) {
            this.baseEl = baseEl || null;
            this.nodes = [];
            this.assemblies = [];
        }
    };

    Y.extend(Y.Fantasy.html.NodeAssembly, {

        prototype: {
            attrAliasMap: { 
                'class': 'className', 
                'for': 'htmlFor'
            },
            htmlDecode: Y.Fantasy.html.htmlDecode,
            createAnonEl: function(elType, attributes, content) {
                var el = document.createElement(elType),
                    attr;
                if (attributes !== null) {
                    for (attr in attributes) {
                        if (typeof attributes[attr] !== 'function') {
                            if (this.attrAliasMap[attr]) {
                                el[this.attrAliasMap[attr]] = attributes[attr];
                            } else { //  if(attr == "class") { el.className = attributes[attr]; }
                                el.setAttribute(attr, attributes[attr]); 
                            }
                        }
                    }
                }
                if (content && content!==null) {
                    if (content.htmlStr) {
                        el.innerHTML = content.htmlStr;         
                    } else if (typeof content === 'string') {
                        el.appendChild(document.createTextNode(content));
                    } else {
                        el.appendChild(content);
                    }
                }
                return el;
            },
               
            createEl: function(elType, attributes, content) {
                this.nodes.push(this.createAnonEl(elType, attributes, content));
            },

            createElWithReturn: function(elType, attributes, content) {
                var el = this.createAnonEl(elType, attributes, content);
                this.nodes.push(el);
                return el;
            },

            createTextEl: function(str) {
                this.nodes.push(document.createTextNode(str));
            },

            createElWithAssembly: function(elType, attributes) {
                var el = this.createElWithReturn(elType, attributes),
                    na = new Y.Fantasy.html.NodeAssembly(el);
                this.assemblies.push(na);
                return na;
            },

            insertEl: function(el) {
                this.nodes.push(el);
            },

            insertDocFrag: function() {
                var docFrag = document.createDocumentFragment(),
                    nodesLim= this.nodes.length,
                    x;
                for (x=0; x<nodesLim; x+=1) {
                    docFrag.appendChild(this.nodes[x]);
                }
                this.insertAssemblies();
                return docFrag;
            },

            insertIn: function(el) {
                var insertion = el || this.baseEl,
                    insertionEl = insertion ? Y.one(insertion) : null,
                    docFrag;
                if (insertionEl && insertionEl.appendChild) {
                    docFrag = this.insertDocFrag();
                    insertionEl.appendChild(docFrag);
                }
            },

            insertAssemblies: function() {
                var assLim = this.assemblies.length,
                    x;
                for (x=0; x<assLim; x+=1) {
                    this.assemblies[x].insertIn();
                }
            }
        }
    });
}, '', {'requires': ['node', 'event']});