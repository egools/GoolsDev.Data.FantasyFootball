YUI.add('media-overlay-surround', function (Y) {
    var doc_height = null;

    Y.namespace('Sports.Plugin.Overlay.Surround');

    Y.Sports.Plugin.Overlay.Surround = Y.Base.create('YSOverlaySurroundPlugin', Y.Plugin.Base, [], {

        _handles: {},
        _oSides: {
            'L': {
                title: 'left',
                valid: false,
                avail: 0,
                adjacent: ['T', 'B']
            },
            'R': {
                title: 'right',
                valid: false,
                avail: 0,
                adjacent: ['T', 'B']
            },
            'T': {
                title: 'top',
                valid: false,
                avail: 0,
                adjacent: ['L', 'R']
            },
            'B': {
                title: 'bottom',
                valid: false,
                avail: 0,
                adjacent: ['L', 'R']
            }
        },
        _sNode: null,
        _resizing: false,

        initializer: function () {
            var oPlug = this,
                oHost = oPlug.get('host');

            if (oHost.get('rendered')) {
                oPlug.bindUI();
            } else {
                oPlug._handles.afterHostBindUI = oPlug.afterHostMethod('bindUI', function () {
                    oPlug.bindUI();
                    oPlug._handles.afterHostBindUI.detach();
                    delete oPlug._handles.afterHostBindUI;
                });
            }
        },

        bindUI: function () {
            var oPlug = this,
                oHost = oPlug.get('host');

            oPlug._handles.afterHostVisibleChange = oHost.on('visibleChange', Y.bind(oPlug.afterHostVisibleChange, oPlug));
        },

        _bindResetAlignOnResize: function () {
            var oPlug = this;

            if (oPlug.get('resetAlignOnResize') && !oPlug._handles.onWindowResize) {
                oPlug._handles.onWindowResize = Y.on('windowresize', Y.bind(oPlug.onWindowResize, oPlug));
            }
        },

        _detachResetAlignOnResize: function () {
            var oPlug = this;

            if (oPlug._handles.onWindowResize) {
                oPlug._handles.onWindowResize.detach();
                delete oPlug._handles.onWindowResize;
            }
        },

        beforeHostVisibleChange: function (e) {
            var oPlug = this;

            if (e.newVal) {
                oPlug._surround();
            }
        },

        afterHostVisibleChange: function (e) {
            var oPlug = this;

            if (e.newVal) {
                oPlug._bindResetAlignOnResize();
            } else {
                oPlug._detachResetAlignOnResize();
            }
        },

        onWindowResize: function () {
            if (Y.Lang.isUndefined(window.attachEvent) || (doc_height !== document.documentElement.clientHeight)) {
                var oPlug = this;

                if (!oPlug._resizing) {
                    oPlug._resizing = true;

                    Y.later(1500, {}, function () {
                        oPlug._surround();
                        if (oPlug.get('indicator')) {
                            oPlug.showIndicator();
                        }
                        oPlug._resizing = false;
                    });
                }

                doc_height = document.documentElement.clientHeight;
            }
        },

        _getBestSurroundSide: function () {
            var oPlug = this,
                s_enabled = oPlug.get('surround.enabled'),
                s_node = oPlug._sNode,
                s_sides = oPlug.get('surround.sides'),
                s_sides_str = '',
                docScrollX,
                docScrollY,
                winHeight,
                winWidth,
                nodeXY,
                final_side;

            if (s_enabled && s_node) {
                s_sides = (s_sides && s_sides.length > 0) ? s_sides : ['R', 'L', 'T', 'B'];
                s_sides_str = s_sides.join();
                docScrollX = s_node.get('docScrollX');
                docScrollY = s_node.get('docScrollY');
                winHeight = s_node.get('winHeight');
                winWidth = s_node.get('winWidth');
                nodeXY = s_node.getXY();
                final_side = s_sides[0];

                Y.each(oPlug._oSides, function (v, k) {
                    oPlug._oSides[k].valid = (s_sides_str.indexOf(k) > -1);
                });

                oPlug._oSides.T.avail = nodeXY[1] - docScrollY;
                oPlug._oSides.L.avail = nodeXY[0] - docScrollX;
                oPlug._oSides.R.avail = winWidth - (oPlug._oSides.L.avail + s_node.get('offsetHeight'));
                oPlug._oSides.B.avail = winHeight - (oPlug._oSides.T.avail + s_node.get('offsetHeight'));

                Y.each(oPlug._oSides, function (v, k) {
                    if (v.valid && (v.avail > oPlug._oSides[final_side].avail)) {
                        final_side = k;
                    }
                });

                return final_side;
            }
        },

        _surround: function (force_side) {
            var oPlug = this,
                side = (force_side && oPlug._oSides[force_side]) ? force_side : oPlug._getBestSurroundSide(),
                oHost = oPlug.get('host'),
                boundingBox = oHost.get('boundingBox'),
                contentBox = oHost.get('contentBox'),
                indicator = oPlug.get('indicator'),
                indicatorNode = oPlug.get('indicatorNode'),
                surroundNode = oPlug.get('surround.node'),
                scrollX = contentBox.get('docScrollX'),
                scrollY = contentBox.get('docScrollY'),
                winWidth = contentBox.get('winWidth'),
                winHeight = contentBox.get('winHeight'),
                s_x = 0,
                s_y = 0,
                s_w = 0,
                s_h = 0,
                cb_x = 0,
                cb_y = 0,
                cb_w = 0,
                cb_h = 0,
                ind_x = 0,
                ind_y = 0,
                ind_w = 0,
                ind_h = 0,
                validateX = function (x, w) {
                    var right_edge = (scrollX + winWidth),
                        new_x = 0;

                    if (scrollX < s_x && x < scrollX) {
                        return scrollX;
                    }

                    if (right_edge > (s_x + s_w) && (x + w) > right_edge) {
                        new_x = (right_edge - w);
                        if (new_x < x) {
                            return new_x;
                        }
                    }
                    return x;
                },
                validateY = function (y, h) {
                    var bottom_edge = (scrollY + winHeight),
                        new_y = 0;

                    if (scrollY < s_y && y < scrollY) {
                        return scrollY;
                    }

                    if (bottom_edge > (s_y + s_h) && (y + h) > bottom_edge) {
                        new_y = (bottom_edge - h);
                        if (new_y < y) {
                            return new_y;
                        }
                    }
                    return y;
                };

            if (surroundNode) {
                if (indicator && indicatorNode) {
                    indicatorNode.setStyles({
                        'zIndex': oHost.get('contentBox').getStyle('zIndex') + 1
                    });
                    ind_w = parseInt(indicatorNode.get('offsetWidth'), 10);
                    ind_h = parseInt(indicatorNode.get('offsetHeight'), 10);
                }

                cb_h = parseInt(contentBox.get('offsetHeight'), 10);
                cb_w = parseInt(contentBox.get('offsetWidth'), 10);

                s_x = surroundNode.getX();
                s_y = surroundNode.getY();
                s_w = surroundNode.get('offsetWidth');
                s_h = surroundNode.get('offsetHeight');

                switch (side) {
                    case 'T':
                        if (indicator && indicatorNode) {
                            ind_x = (s_x + (s_w / 2)) - (ind_w / 2);
                            ind_y = (s_y - ind_h);
                        }
                        cb_x = validateX((s_x + (s_w / 2)) - (cb_w / 2), cb_w);
                        cb_y = (s_y - (ind_h + cb_h));
                        break;
                    case 'R':
                        if (indicator && indicatorNode) {
                            ind_x = (s_x + s_w);
                            ind_y = (s_y + s_h / 2) - ind_h / 2;
                        }
                        cb_x = (s_x + s_w + ind_w);
                        cb_y = validateY((s_y + s_h / 2) - cb_h / 2, cb_h);
                        break;
                    case 'B':
                        if (indicator && indicatorNode) {
                            ind_x = (s_x + (s_w / 2)) - (ind_w / 2);
                            ind_y = (s_y + s_h);
                        }
                        cb_x = validateX((s_x + (s_w / 2)) - (cb_w / 2), cb_w);
                        cb_y = (s_y + s_h + ind_h);
                        break;
                    case 'L':
                        if (indicator && indicatorNode) {
                            ind_x = (s_x - ind_w);
                            ind_y = (s_y + s_h / 2) - ind_h / 2;
                        }
                        cb_x = (s_x - (ind_w + cb_w));
                        cb_y = validateY((s_y + s_h / 2) - cb_h / 2, cb_h);
                        break;
                }

                if (indicator && indicatorNode) {
                    indicatorNode.setStyles({
                        'left': ind_x + 'px',
                        'top': ind_y + 'px'
                    });
                }

                contentBox.setStyles({
                    'left': cb_x + 'px',
                    'top': cb_y + 'px'
                });

                Y.some(oPlug._oSides, function (v, k) {
                    var className = oHost.getClassName() + '-surround-' + k;
                    if (boundingBox.hasClass(className)) {
                        boundingBox.removeClass(className);
                    }
                });

                boundingBox.addClass(oHost.getClassName() + '-surround-' + side);

                if (!force_side && ((indicator && indicatorNode && (ind_h !== parseInt(indicatorNode.get('offsetHeight'), 10) || ind_w !== parseInt(indicatorNode.get('offsetWidth'), 10))) || (cb_h !== parseInt(contentBox.get('offsetHeight'), 10) || cb_w !== parseInt(contentBox.get('offsetWidth'), 10)))) {
                    oPlug._surround(force_side);
                }
            }
        },

        showIndicator: function () {
            var indicatorNode = this.get('indicatorNode');

            if (indicatorNode) {
                indicatorNode.setStyle('visibility', '');
            }
        },

        hideIndicator: function () {
            var indicatorNode = this.get('indicatorNode');

            if (indicatorNode) {
                indicatorNode.setStyle('visibility', 'hidden');
            }
        }
    }, {
        ATTRS: {
            'indicator': {
                value: false,

                validator: Y.Lang.isBoolean,

                setter: function (val) {
                    var oPlug = this,
                        oHost = oPlug.get('host'),
                        boundingBox = oHost.get('boundingBox'),
                        indicatorNode = oPlug.get('indicatorNode');

                    if (val && !indicatorNode) {
                        indicatorNode = Y.Node.create('<h6 class="' + oHost.getClassName() + '-indicator">More Information</h6>');
                        boundingBox.append(indicatorNode);
                        oPlug.set('indicatorNode', indicatorNode);
                    } else if (!val) {
                        oPlug.hideIndicator();
                    } else {
                        oPlug.showIndicator();
                    }
                },

                lazyAdd: false
            },

            'indicatorNode': {
                value: null,

                setter: function (val) {
                    var node = null;

                    if (!Y.Lang.isNull(val) && !Y.Lang.isString(val) && !Y.instanceOf(val, Y.Node)) {
                        Y.log('IndicatorNode value was not a Node instance or selector string.  IndicatorNode not set.');
                    } else if (Y.Lang.isString(val)) {
                        node = Y.one(val);
                    } else {
                        node = val;
                    }

                    return node;
                }
            },

            'resetAlignOnResize': {
                value: false,

                validator: Y.Lang.isBoolean,

                setter: function (val) {
                    var oPlug = this,
                        oHost = oPlug.get('host');

                    if (val && oHost.get('visible')) {
                        oPlug._bindResetAlignOnResize();
                    } else if (!val) {
                        oPlug._detachResetAlignOnResize();
                    }
                },

                lazyAdd: false
            },

            'surround': {

                value: {
                    node: null,
                    enabled: false,
                    sides: [],
                    buffer: 0
                },

                validator: function (val) {
                    var valid = true;

                    if (!Y.Lang.isObject(val)) {
                        return false;
                    }

                    Y.some(val, function (v, k) {
                        if (k !== 'node' && k !== 'enabled' && k !== 'sides' && k !== 'buffer') {
                            Y.log('Key passed to surround setter is invalid');
                            valid = false;
                            return true;
                        }
                        if ((k === 'node' && (!Y.Lang.isString(v) && !Y.instanceOf(v, Y.Node))) || (k === 'enabled' && !Y.Lang.isBoolean(v)) || (k === 'sides' && !Y.Lang.isArray(v)) || (k === 'buffer' && !Y.Lang.isNumber(v))) {
                            Y.log('Value passed to surround.' + k + ' was of wrong type.');
                            valid = false;
                            return true;
                        }
                    });

                    return valid;
                },

                setter: function (val) {
                    var oPlug = this,
                        oHost = oPlug.get('host'),
                        node = val.node,
                        oldNode = oPlug._sNode,
                        valid = true,
                        oSides = {};

                    if (node && Y.Lang.isString(node)) {
                        node = Y.one(node);
                        if (node) {
                            oPlug._sNode = node;
                        } else {
                            valid = false;
                            Y.log('surround.node not valid.  surround not set.');
                        }
                    } else if (node) {
                        oPlug._sNode = node;
                    } else {
                        oPlug._sNode = null;
                    }

                    if (oPlug._sNode) {
                        oPlug._handles.beforeHostVisibleChange = oHost.before('visibleChange', Y.bind(oPlug.beforeHostVisibleChange, oPlug));
                    } else if (oPlug._handles.beforeHostVisibleChange) {
                        oPlug._handles.beforeHostVisibleChange.detach();
                        delete oPlug._handles.beforeHostVisibleChange;
                    }

                    if (val.sides) {
                        if (val.sides.length > 4) {
                            valid = false;
                            Y.log('surround.sides contains too many contraint characters.  surround not set');
                        }
                        if (valid) {
                            Y.some(val.sides, function (v) {
                                if (!oPlug._oSides[v]) {
                                    valid = false;
                                    Y.log('surround.sides contains invalid side characters.  surround not set.');
                                    return true;
                                }

                                if (oSides[v]) {
                                    valid = false;
                                    Y.log('surround.sides contains duplicate characters.  surround not set.');
                                    return true;
                                }
                                oSides[v] = true;
                            });
                        }
                    }

                    if (!valid) {
                        return Y.Attribute.INVALID_VALUE;
                    }

                    if (val.enabled) {
                        oHost.get('boundingBox').setStyles({
                            'height': 0,
                            'width': 0
                        });
                    } else {
                        oHost.get('boundingBox').setStyles({
                            'height': '',
                            'width': ''
                        });
                    }

                    if (oHost.get('visible') && node && oldNode !== node) {
                        oPlug._surround();
                    }

                    oHost.set('align', null);
                }
            }
        },

        NS: 'yssurround'
    });
}, '', { 'requires': ['plugin', 'base-build', 'node-screen', 'event-resize'] });
