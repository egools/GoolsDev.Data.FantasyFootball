YUI.add('media-playernote', function (Y) {
    Y.namespace('Sports');

    var detachAfterViewEnhanced = function (oMod, oView, type) {
            if (oMod._handles['afterViewEnhanced' + type]) {
                oMod._handles['afterViewEnhanced' + type].detach();
                delete oMod._handles['afterViewEnhanced' + type];
            }
        },
        bindAfterViewEnhanced = function (oMod, oView, type) {
            if (!oView.get('enhanced')) {
                oMod._handles['afterViewEnhanced' + type] = oView.after('enhanced', Y.bind(function () {
                    oMod.fire('reveal');
                    detachAfterViewEnhanced(oMod, oView);
                }, oMod));
            } else {
                oMod.fire('reveal');
            }
        };

    Y.Sports.PlayerNote = Y.Base.create('YSPlayerNote', Y.Overlay, [], {

        _handles: {},
        _curIO: null,
        _newContent: null,

        initializer: function () {
            var oMod = this;

            oMod.plug(Y.Sports.Plugin.Overlay.Surround, {
                indicator: true,
                resetAlignOnResize: true,
                surround: {
                    enabled: true,
                    sides: ['L', 'R'],
                    buffer: 20
                }
            }).plug(Y.Sports.Plugin.Overlay.Close, {
                clickAnywhereToClose: {
                    enabled: true
                },
                closers: ['a.' + oMod.getClassName() + '-close'],
                esc: true
            }).get('contentBox').plug(Y.Plugin.Drag, {
                handles: ['.yui3-widget-hd']
            });

            oMod.publish('initialLoad', {
                bubbles: true,
                context: oMod,
                defaultFn: function () {
                    oMod.fire('load');
                }
            });

            oMod.publish('load', {
                bubbles: true,
                context: oMod,
                defaultFn: oMod._updateContent
            });

            oMod.publish('reveal', {
                bubbles: true,
                context: oMod,
                defaultFn: oMod._revealContent
            });

            oMod.addTarget(Y.Global);
        },

        renderUI: function () {
            var oMod = this;

            oMod.set('bodyContent', '<div class="' + oMod.getClassName() + '-bdcontent">' + oMod._getLoadingMessage() + '    </div>').set('headerContent', Y.substitute('<h5>Yahoo! Sports Player Note <a class="{className}-close" href="#">close not    e</a></h5>', {
                'className': oMod.getClassName()
            })).set('footerContent', '');
            oMod.set('zIndex', '9999999');



            if (Y.UA.ie && Y.UA.ie < 9) {
                oMod.set('bodyContent', '<div class="' + oMod.getClassName() + '-bdcontent">' + oMod._getLoadingMessage() + '</div>').set('headerContent', Y.substitute('<h5>Yahoo! Sports Player Note <a class="{className}-close close" href="#">close note</a></h5>', {
                    'className': oMod.getClassName()
                })).set('footerContent', '');
            } else {
                oMod.set('bodyContent', '<div class="' + oMod.getClassName() + '-bdcontent">' + oMod._getLoadingMessage() + '</div>').set('headerContent', Y.substitute('<h5>Yahoo! Sports Player Note <a class="{className}-close F-icon Fz-xs F-shade3" href="#">&#xe009;</a></h5>', {
                    'className': oMod.getClassName()
                })).set('footerContent', '');
            }
        },

        bindUI: function () {
            var oMod = this,
                contentBox = oMod.get('contentBox');

            oMod._handles.beforeCurrentViewChange = oMod.before('currentViewChange', Y.bind(oMod._beforeCurrentViewChange, oMod));
            oMod._handles.afterCurrentViewChange = oMod.after('currentViewChange', Y.bind(oMod._afterCurrentViewChange, oMod));
            oMod._handles.beforeVisibleChange = oMod.before('visibleChange', Y.bind(oMod._beforeVisibleChange, oMod));
            oMod._handles.afterVisibleChange = oMod.after('visibleChange', Y.bind(oMod._afterVisibleChange, oMod));
            oMod._handles.onDDDragStart = contentBox.dd.on('drag:start', Y.bind(oMod._onDDDragStart, oMod));
        },

        _beforeVisibleChange: function (e) {
            var oMod = this,
                yssurround = oMod.yssurround;

            if (e.newVal) {
                oMod.get('contentBox').setStyle('left', '');
            }

            if (e.newVal && (!yssurround || !yssurround._resizing)) {
                oMod._populate();
            }
        },

        _afterVisibleChange: function (e) {
            var oMod = this;

            if (!e.newVal) {
                oMod.get('contentBox').setStyle('left', '-9999em');
            }
        },

        _beforeCurrentViewChange: function (e) {
            var oMod = this,
                currentView = e.prevVal;

            if (!oMod._isViewCached(currentView)) {
                oMod._getViewNode(currentView).unplug();
            }
        },

        _afterCurrentViewChange: function (e) {
            var oMod = this;

            if (e.newVal !== e.oldVal) {
                oMod._populate();
            }
        },

        _onDDDragStart: function () {
            var oMod = this,
                yssurround = oMod.yssurround;

            if (yssurround && yssurround.get('indicator')) {
                yssurround.hideIndicator();
            }
        },

        _onNoteIOSuccess: function (id, o) {
            var oMod = this,
                oView = null,
                oViews,
                oPlug,
                response,
                content,
                errors,
                payload,
                currentView,
                viewNode;

            try {
                response = Y.JSON.parse(o.responseText);
                content = response.content || '';
                errors = response.errors || [];
                payload = response.objects || {};
                currentView = oMod.get('currentView');
                viewNode = null;

                if (!errors || errors.length === 0) {
                    oMod._newContent = content;

                    if (oMod.get('initialLoad')) {
                        oMod.fire('initialLoad');
                    } else {
                        oMod.fire('load');
                    }

                    viewNode = oMod._getViewNode(currentView);

                    oViews = Y.Sports.PlayerNoteViews;
                    oPlug = (oViews) ? oViews[currentView.substring(0, 1).toUpperCase() + currentView.substring(1)] : null;

                    if (oPlug) {
                        viewNode.plug(oPlug, {
                            payload: payload,
                            oNote: oMod
                        });
                    } else {
                        viewNode.plug(Y.Sports.Plugin.PlayerNote.View, {
                            payload: payload,
                            oNote: oMod
                        });
                    }

                    oView = viewNode.ysplayernoteview;
                    bindAfterViewEnhanced(oMod, oView, currentView);
                }
            } catch (e) {
                Y.log(e);
                oMod._hideAndLaunchHref();
            }
        },

        _getLoadingMessage: function (newView) {
            var oMod = this,
                currentView = oMod.get('currentView'),
                displayView = newView || currentView;

            return Y.substitute('<p class="loading-view">Loading Player {view}.....</p>', {
                'view': displayView.charAt(0).toUpperCase() + displayView.substring(1)
            });
        },

        _getNoteUrl: function (cached) {
            var oMod = this,
                base_url = oMod.get('noteUrlFormatter')();

            if (cached) {
                if (base_url.indexOf('?') > -1) {
                    base_url = base_url.replace('?', '?pvonly=1&');
                } else if (base_url.indexOf('#') > -1) {
                    base_url = base_url.replace('#', '?pvonly=1&#');
                } else {
                    base_url += '?pvonly=1';
                }
            }

            return base_url;
        },

        _getComscoreUrl: function () {
            var oMod = this;

            return oMod.get('comscoreUrlFormatter')();
        },

        _populate: function () {
            var oMod = this,
                currentView = oMod.get('currentView'),
                cached = oMod._isViewCached(currentView),
                noteUrl = oMod._getNoteUrl(cached),
                cfg = {
                    method: 'GET',
                    headers: {'Ajax-Request': 'true'}
                };

            if (!cached) {
                Y.mix(cfg, {
                    context: oMod,
                    on: {
                        'success': oMod._onNoteIOSuccess
                    }
                });
            } else {
                oMod.fire('load');
                oMod.fire('reveal');
            }

            if (noteUrl) {
                Y.io(noteUrl, cfg);
            } else {
                oMod._hideAndLaunchHref();
            }
        },

        _updateContent: function () {
            var oMod = this,
                currentView = oMod.get('currentView'),
                cached = oMod._isViewCached(currentView),
                content,
                contentBox,
                initialLoad,
                newNode,
                bdNode,
                ftNode,
                newBdNode,
                newFtNode,
                viewNode;

            if (!cached) {
                content = oMod._newContent;
                contentBox = oMod.get('contentBox');
                initialLoad = oMod.get('initialLoad');
                newNode = Y.Node.create('<div>' + content + '</div>');
                bdNode = contentBox.one('.' + oMod.getClassName() + '-bdcontent');
                ftNode = contentBox.one('.' + oMod.getClassName() + '-ftcontent');
                newBdNode = newNode.one('div.dynamicnote');
                newFtNode = newNode.one('div.playernotepromos');
                viewNode = (bdNode) ? oMod._getViewNode(currentView) : null;

                if (initialLoad) {
                    newBdNode.all('.playernoteview').setStyle('display', 'none');
                    oMod.set('bodyContent', bdNode.append(newBdNode));
                    oMod.set('initialLoad', false);
                } else if (viewNode && newNode.get('children')) {
                    viewNode.empty(true).append(newNode.get('children'));
                }

                if (Y.Sports.Plugin.PlayerNoteTabs) {
                    oMod.plug(Y.Sports.Plugin.PlayerNoteTabs);
                }

                if (newFtNode && ftNode) {
                    oMod.set('footerContent', ftNode.empty(true).append(newFtNode));
                }
            }
        },

        _revealContent: function () {
            var oMod = this,
                currentView = oMod.get('currentView'),
                viewNode = oMod._getViewNode(currentView);

            oMod.removeLoadingMessage();
            oMod.fireComscorePageView();

            viewNode.setStyle('display', '');

            Y.Fantasy.Headshot.init('.yui3-ysplayernote');
        },

        _hideAndLaunchHref: function () {
            var oMod = this,
                noteNode = oMod.get('noteNode'),
                href = (noteNode) ? noteNode.get('href') : null;

            Y.later(0, oMod, oMod.hide);

            if (href) {
                window.open(href, 'sports');
            }
        },

        _getViewNode: function (type) {
            var oMod = this,
                contentBox = oMod.get('contentBox'),
                node = null;

            if (type && Y.Lang.isString(type)) {
                node = contentBox.one('.playernoteview-' + type);
            }

            return node;
        },

        getCurrentViewNode: function () {
            var oMod = this,
                contentBox = oMod.get('contentBox'),
                currentView = oMod.get('currentView');

            return contentBox.one('.playernoteview-' + currentView);
        },

        _isViewCached: function (type) {
            var oMod = this,
                viewNode = oMod._getViewNode(type),
                oView = (viewNode && viewNode.ysplayernoteview) ? viewNode.ysplayernoteview : null,
                cached = false;

            if (oView) {
                cached = oView.get('cached');
            }

            return cached;
        },

        fireComscorePageView: function () {
            var oMod = this;

            Y.io(oMod._getComscoreUrl());
        },

        removeLoadingMessage: function () {
            var oMod = this,
                contentBox = oMod.get('contentBox'),
                loadingNode = contentBox.one('.loading-view');

            if (loadingNode) {
                loadingNode.remove(true);
            }
        },

        destructor: function () {}
    }, {

        ATTRS: {

            initialLoad: {
                value: true,
                validator: Y.Lang.isBoolean
            },

            currentView: {
                value: '',

                validator: Y.Lang.isString,

                setter: function (val) {
                    var oMod = this;

                    if (oMod.get('initialView') === '') {
                        oMod.set('initialView', val);
                    }
                }
            },

            initialView: {
                value: '',
                validator: Y.Lang.isString
            },

            pid: {
                value: null
            },

            pidParser: {

                value: function (node) {
                    return node.getAttribute('data-ys-playerid');
                },
                validator: Y.Lang.isFunction,
                lazyAdd: false
            },

            noteNode: {
                value: null,

                setter: function (val) {
                    var oMod = this,
                        node = null,
                        pid,
                        view;

                    if (!Y.Lang.isNull(val) && !Y.Lang.isString(val) && !Y.instanceOf(val, Y.Node)) {
                        Y.log('noteNode value was not a Node instance or selector string.  NoteNode not set.');
                    } else if (Y.Lang.isString(val)) {
                        node = Y.one(val);
                    } else {
                        node = val;
                    }

                    if (node) {
                        pid = oMod.get('pidParser')(node);
                        view = node.getAttribute('data-ys-playernote-view');
                        view = view || 'notes';

                        oMod.set('currentView', view);
                        oMod.set('pid', pid);
                    }
                    return node;
                },

                lazyAdd: false
            },

            comscoreUrlFormatter: {
                value: function () {
                    return null;
                },

                validator: Y.Lang.isFunction
            },

            noteUrlFormatter: {
                value: function () {
                    return null;
                },

                validator: Y.Lang.isFunction
            }
        }
    });
}, '', { 'requires': ['overlay', 'io-base', 'json-parse', 'media-overlay-surround', 'media-overlay-close', 'dd-plugin', 'media-playernote-css', 'substitute', 'media-playernote-view', 'media-playernote-tabs', 'ysf-headshot'] });
