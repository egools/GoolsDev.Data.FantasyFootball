YUI.add('media-playernote-views-video', function (Y) {
    Y.namespace('Sports.PlayerNoteViews.Video');

    Y.Sports.PlayerNoteViews.Video = Y.Base.create('YSPlayerNoteViewsVideo', Y.Sports.Plugin.PlayerNote.View, [], {

        initializer: function () {
            var oPlug = this,
                payload = oPlug.get('payload'),
                mediaId = (payload[0] && payload[0].mediaId) ? payload[0].mediaId : null;

            oPlug.set('mediaId', mediaId);
        },

        renderUI: function () {
            this._renderVideo();
        },

        _renderVideo: function () {
            var oPlug = this,
                mediaId = oPlug.get('mediaId'),
                videoNode = oPlug.get('videoNode'),
                oPlayer = oPlug.get('oPlayer');

            if (mediaId && oPlayer) {
                oPlayer.init({
                    'size': [480, 269],
                    'mediaId': mediaId,
                    'mdbId': 0,
                    'el': Y.Node.getDOMNode(videoNode),
                    'shareUrl': ''
                });
            }
        },

        _destroyVideo: function () {
            this.get('videoNode').empty(true);
        },

        bindUI: function () {
            var oPlug = this,
                oNote = oPlug.get('oNote');

            oPlug._handles.afterNoteVisibleChange = oNote.after('visibleChange', Y.bind(oPlug._afterNoteVisibleChange, oPlug));
            oPlug._handles.onNoteCurrentViewChange = oNote.on('currentViewChange', Y.bind(oPlug._onNoteCurrentViewChange, oPlug));
        },

        _afterNoteVisibleChange: function (e) {
            var oPlug = this,
                oNote = oPlug.get('oNote');

            if (e.newVal) {
                oPlug._renderVideo();
            } else if (oNote.get('currentview') !== 'video') {
                oPlug._destroyVideo();
            }
        },

        _onNoteCurrentViewChange: function (e) {
            var oPlug = this;

            if (e.newVal !== 'video') {
                oPlug._destroyVideo();
            } else {
                oPlug._renderVideo();
            }
        },

        syncUI: function () {
            var oPlug = this;

            oPlug.fire('enhanced');
        }

    }, {
        ATTRS: {
            mediaId: {
                value: null
            },
            videoNode: {
                valueFn: function () {
                    return this.get('host').one('.player-swf');
                }
            },
            oPlayer: {
                valueFn: function () {
                    return YAHOO.Media.Player.summon();
                }
            }
        },
        NS: 'ysplayernoteview'
    });
}, '', { 'requires': ['media-playernote-view'] });