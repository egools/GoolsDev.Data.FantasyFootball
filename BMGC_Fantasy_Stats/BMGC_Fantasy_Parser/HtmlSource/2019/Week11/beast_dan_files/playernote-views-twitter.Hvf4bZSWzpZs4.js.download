YUI.add('media-playernote-views-twitter', function (Y) {
    Y.namespace('Sports.PlayerNoteViews.Twitter');

    Y.Sports.PlayerNoteViews.Twitter = Y.Base.create('YSPlayerNoteViewsTwitter', Y.Sports.Plugin.PlayerNote.View, [], {

        _handles: {},

        _curType: 'twitter-official',

        initializer: function () {},

        renderUI: function () {
            var oPlug = this,
                oNode = oPlug.get('host'),
                payload = oPlug.get('payload'),
                contentBox = oNode.ancestor('.yui3-ysplayernote'),
                teamNode = contentBox.one('.player-team-name'),
                playerNode = contentBox.one('.name'),
                team_name = (teamNode) ? teamNode.getAttribute('data-twitteracct') : '',
                player_name = (playerNode) ? playerNode.get('innerHTML') : '',
                twitter_type = 'official';

            oPlug.set('teamName', team_name);
            oPlug.set('playerName', player_name);

            oNode.set('innerHTML', oPlug.get('tweetNav'));

            if (payload[0] && payload[0].team_tweets) {
                oNode.append(oPlug._buildTweetMarkup(payload[0].team_tweets, twitter_type));
            } else {
                oNode.append('<ul class="twitter-' + twitter_type + ' twitter-view"><li class="notweets">No recent tweets found.</li></ul>');
            }

            twitter_type = 'search';
            if (payload[1] && payload[1].player_tweets) {
                oNode.append(oPlug._buildTweetMarkup(payload[1].player_tweets, twitter_type));
            } else {
                oNode.append('<ul class="twitter-' + twitter_type + ' twitter-view"><li class="notweets">No recent tweets found.</li></ul>');
            }
        },

        _buildTweetMarkup: function (tweets, tweet_type) {
            var oPlug = this,
                content = ['<ul class="twitter-' + tweet_type + ' twitter-view">'],
                player_name = oPlug.get('playerName'),
                team_name = oPlug.get('teamName'),
                type; // eslint-disable-line no-unused-vars

            if (tweet_type === 'official') {
                type = 'team_tweets';
            } else {
                type = 'player_tweets';
            }

            if (tweets.length === 0) {
                content.push('<li class="noresults">No Twitter results.</li>');
            }

            Y.each(tweets, function (v, i, a) {
                var menuclass = [],
                    result = v,
                    icon = result.user_profile_image_url,
                    user = result.user_screen_name,
                    userURL = 'http://twitter.com/' + user,
                    tweet = '',
                    posted = result.created_at_formatted;

                if (i % 2) {
                    menuclass.push('even');
                } else {
                    menuclass.push('odd');
                }

                if (i === 0) {
                    menuclass.push('first');
                } else if (i === (a.length - 1)) {
                    menuclass.push('last');
                }

                tweet = result.text.replace(new RegExp(player_name, 'i'), '<span>' + player_name + '</span>');

                if (oPlug._curType !== 'official') {
                    tweet = result.text.replace(new RegExp(team_name, 'i'), '<span>' + team_name + '</span>');
                }

                // Links
                tweet = tweet.replace(/(ftp|http|https|file):\/\/[\S]+(\b|$)/gim, '<a href="$&" target="sports">$&</a>');
                // To User
                tweet = tweet.replace(/@([a-zA-Z0-9_]+)/gi, '<a target="_blank" href="http://twitter.com/$1" target="_blank" class="username">@$1<\/a>');
                // Hashtag
                tweet = tweet.replace(/#([a-zA-Z0-9_]+)/gi, '<a target="_blank" href="http://search.twitter.com/search?q=%23$1" target="_blank" class="hashtag">#$1<\/a>');

                posted = (oPlug._tweetTimestamp(posted)) ? '<span class="time">(' + oPlug._tweetTimestamp(posted) + ')</span>' : '';

                content.push('<li class="' + menuclass.join(' ') + '"><a target="_blank" href="' + userURL + '" class="avatar" style="background-image: url(' + icon + ');">' + user + '</a><strong><a target="_blank" href="' + userURL + '">' + user + '</a></strong>: ' + tweet + '<br />' + posted + '</li>');
            });

            content.push('</ul>');

            return content.join('');
        },

        bindUI: function () {
            var oPlug = this,
                oNode = oPlug.get('host');

            oPlug._handles.onTwitNavClick = oNode.delegate('click', Y.bind(oPlug._onTwitNavClick, oPlug), '.twitternav a');
        },

        _onTwitNavClick: function (e) {
            e.halt();

            var oPlug = this,
                oNode = oPlug.get('host'),
                currentTarget = e.currentTarget,
                liNode = currentTarget.ancestor('li'),
                new_type = (liNode.hasClass('twitter-official')) ? 'twitter-official' : 'twitter-search';

            if (oPlug._curType !== new_type) {
                oNode.one('.twitternav .selected').removeClass('selected');
                oNode.one('.twitternav .' + new_type).addClass('selected');
                oNode.all('.twitter-view').setStyle('display', 'none');
                oNode.one('.twitter-view.' + new_type).setStyle('display', 'block');
                oPlug._curType = new_type;
            }
        },

        _tweetTimestamp: function (a) {
            var b = new Date(),
                c = new Date(a),
                d,
                e,
                minute,
                hour,
                day,
                week; // eslint-disable-line no-unused-vars

            if (Y.UA.ie > 0) {
                c = Date.parse(a.replace(/( \+)/, ' UTC$1'));
            }

            d = b - c;
            e = 1000;
            minute = e * 60;
            hour = minute * 60;
            day = hour * 24;
            week = day * 7;

            if (isNaN(d) || d < 0) {
                return '';
            }
            if (d < e * 7) {
                return 'right now';
            }
            if (d < minute) {
                return Math.floor(d / e) + ' seconds ago';
            }
            if (d < minute * 2) {
                return 'about 1 minute ago';
            }
            if (d < hour) {
                return Math.floor(d / minute) + ' minutes ago';
            }
            if (d < hour * 2) {
                return 'about 1 hour ago';
            }
            if (d < day) {
                return Math.floor(d / hour) + ' hours ago';
            }
            if (d > day && d < day * 2) {
                return 'yesterday';
            }
            if (d < day * 365) {
                return Math.floor(d / day) + ' days ago';
            }

            return 'over a year ago';
        },

        syncUI: function () {
            var oPlug = this;

            oPlug.fire('enhanced');
        }

    }, {
        ATTRS: {
            revealDelay: {
                value: true
            },
            teamName: {
                value: ''
            },
            playerName: {
                value: ''
            },
            tweetNav: {
                value: '<ul class="twitternav navlist"><li class="official-nav twitter-official selected""><a class="official-nav-item" href="#">Official Team Feed</a></li><li class="search-nav twitter-search"><a class="search-nav-item" href="#">Twitter Search</a></li></ul>'
            }
        },
        NS: 'ysplayernoteview'
    });
}, '', { 'requires': ['media-playernote-view', 'media-playernote-views-twitter-css', 'node-event-delegate', 'node-style', 'selector-css3'] });