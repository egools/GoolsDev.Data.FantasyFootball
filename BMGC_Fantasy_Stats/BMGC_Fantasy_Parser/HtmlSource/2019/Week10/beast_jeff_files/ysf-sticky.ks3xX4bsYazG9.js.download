YUI.add('ysf-sticky', (function() {
    var stickys = {},
        initFlag = false,
        supportFixed = (function () {
            var elem = document.createElement('div');
            elem.style.cssText = 'position:fixed';
            if (elem.style.position.match('fixed')) {
                return true;
            }
            return false;
        })(),
        initialYOffset = 0,
        requestAnimationFrame = window.requestAnimationFrame || function(callback, element) {
            window.setTimeout(function() {
                callback(); 
            }, 1);
        };

    return function(Y) {
        if (!supportFixed) {
            return;
        }

        var evEventPrefix = 'ysfsticky',
            EV_UNSTICKELEMENT = evEventPrefix + ':unStickElement',
            EV_STICKELEMENT = evEventPrefix + ':stickElement';

        function YSFSticky() {
            YSFSticky.superclass.constructor.apply(this, arguments);
        }

        YSFSticky.NAME = 'ysfsticky';
        YSFSticky.ATTRS = {
            'el': {
                'value': null,
                'setter': function(val) {
                    return Y.one(val);
                }
            },
            'elementY': {
                'value': null
            }
        };

        YSFSticky.init = function(yOffset) {
            if (!initFlag) {
                if (yOffset) {
                    initialYOffset = yOffset;
                }

                initFlag = true;
                // Because these need to check at start and we want to wait until we have all of them... we need to wait until onload to grab them all, set them up and create them
                Y.on('load', function() {
                    var sticks = Y.all('.Sticky');
                    sticks.each(function(stick) {
                        new Y.Fantasy.Sticky({
                            el: stick
                        });
                    });

                    for (var sticky in stickys) {
                        stickys[sticky].checkStickyScroll();
                    }
                });
            }
        };

        Y.extend(YSFSticky, Y.Base, {
            /* Value of YOffset that we have calculated.. this may change but is calculated a lot */
            YOffset: 0,
            initializer: function() {
                // check element set and valid
                var el = this.get('el'),
                    self = this,
                    fn = this.checkStickyScroll;

                if (el) {
                    // keep track of Y position on page of sticky originally
                    this.set('elementY', el.getY());

                    // make sure to keep track of all of them
                    stickys[el] = self;

                    // create event handlers
                    Y.one(Y.config.win).on(['scroll','touchmove'],  fn, this);
                    Y.one(Y.config.win).on('resize', this.stickyResize, this);

                    // Publish events
                    this.publish(EV_UNSTICKELEMENT, {
                        queuable: true,
                        emitFacade: true,
                        defaultFn: Y.bind(this.unStickElement, this),
                        preventable: true,
                        bubbles: true,
                        bubbleEvents: true,
                        broadcast: 1,
                        prefix: evEventPrefix
                    });

                    this.publish(EV_STICKELEMENT, {
                        queuable: true,
                        emitFacade: true,
                        defaultFn: Y.bind(this.stickElement, this),
                        preventable: true,
                        bubbles: true,
                        bubbleEvents: true,
                        broadcast: 1,
                        prefix: evEventPrefix
                    });
                }
            },
            checkStickyScroll: function() {
                var viewportY = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop,
                    el = this.get('el'),
                    YPositionElement = this.get('elementY'),
                    shouldStick = false,
                    isBottom = el.hasClass('StickBottom'),
                    relativePositionComparison = false;

                this.YOffset = isBottom ? 0 : initialYOffset;

                for (var sticky in stickys) {
                    relativePositionComparison = isBottom ? stickys[sticky].get('elementY') > this.get('elementY') : stickys[sticky].get('elementY') < this.get('elementY');
                    if (stickys.hasOwnProperty(sticky) && stickys[sticky] != this && (el.hasClass('StickBottom') == stickys[sticky].get('el').hasClass('StickBottom')) && relativePositionComparison) {
                        this.YOffset += parseInt(stickys[sticky].get('el').getComputedStyle('height'), 10);
                    }
                }

                shouldStick = el.hasClass('StickBottom') ? ((viewportY + Y.one('body').get('winHeight')) - this.YOffset < (YPositionElement + parseInt(el.getComputedStyle('height'), 10))) : (viewportY > YPositionElement - this.YOffset);
                if (shouldStick) {
                    if (!el.hasClass('Stuck')) {
                        this.fire(EV_STICKELEMENT);
                    }
                } else {
                    if (el.hasClass('Stuck')) {
                        this.fire(EV_UNSTICKELEMENT);
                    }
                }
            },
            unStickElement: function(cb) {
                var el = this.get('el'),
                    parent = el.ancestor(),
                    type = el.hasClass('StickBottom') ? 'bottom' : 'top',
                    styles = {'width': '',
                        'height': '',
                        'zIndex': '',
                        'position': ''};
                styles[type] = '';

                requestAnimationFrame(function() {
                    el.setStyles(styles);

                    parent.setStyles({'width': '', 'height': ''});
            
                    el.removeClass('Stuck');

                    if (typeof cb === 'function') {
                        cb();
                    }
                });
            },
            stickElement: function(cb) {
                var el = this.get('el'),
                    parent = el.ancestor(),
                    type = el.hasClass('StickBottom') ? 'bottom' : 'top',
                    styles = {
                        'width': el.getComputedStyle('width'),
                        'height': el.getComputedStyle('height'),
                        'zIndex': 9999,
                        'position': 'fixed'
                    };
                styles[type] = this.YOffset + 'px';


                requestAnimationFrame(function() {
                    // force parents height/width to stay same
                    parent.setStyles({'width': parent.getComputedStyle('width'), 'height': parent.getComputedStyle('height')});

                    el.addClass('Stuck');

                    el.setStyles(styles);

                    if (typeof cb === 'function') {
                        cb();
                    }
                });
            },
            stickyResize: function() {
                var el = this.get('el'),
                    parent = el.ancestor();

                // if we're stuck and we resized, we need to resize ourselves
                if (el.hasClass('Stuck')) {
                    requestAnimationFrame(function() {
                        parent.setStyle('width', '');
                        el.setStyle('width', parent.getComputedStyle('width'));
                        parent.setStyle('width', parent.getComputedStyle('width'));
                    });
                }
            }
        });

        Y.namespace('Fantasy');
        Y.Fantasy.Sticky = YSFSticky;
    };
})(), '0.1', {'requires': ['node', 'event', 'base', 'event-resize']});