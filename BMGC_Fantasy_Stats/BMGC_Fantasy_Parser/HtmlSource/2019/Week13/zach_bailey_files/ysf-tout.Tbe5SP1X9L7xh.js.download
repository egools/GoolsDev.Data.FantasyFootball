/* jslint sloppy:true, nomen:true, white:true, unparam:true, regexp:true*/
/*global YUI*/

/**
 * Provides class for Y.Fantasy.Tout
 * @module ysf-tout
 **/

/**
* Y.Fantasy.Tout provides a simple way to alert easy messages to users. By default, Touts
* appear in a fixed position, and disappear after three seconds.
* @param config {Object} Object literal specifying widget configuration properties.
* @class Tout
* @constructor
* @extends Base
**/
YUI.add('ysf-tout', function(Y) {
    var ToutProto;
    function Tout(cfg) {
        Tout.superclass.constructor.apply(this, arguments);
    }

    Tout.NAME = 'tout';
    Tout.ATTRS = {
        /**
         * Template for touts. Should have an elements that properly map to the 
         * msgSelector attribute and linkSelector attributes (described below)
         * @attribute template
         * @type String
         * @default &lt;div class="Tout-wrap"&gt;&lt;div class="Tout"&gt;&lt;p class="Tout-Msg"&gt;&lt;/p&gt;&lt;a class="Tout-Link" href="#"&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
         **/

        'template': {
            value: '<div class="Tout-wrap"><div class="Tout" role="alert"><p class="Tout-Msg"><\/p><a class="Tout-Link">href="#"><\/a><\/div></div>'
        },

        /**
         * CSS selector to identify which element tout messages should appear in.
         * @attribute msgSelector
         * @type String
         * @default .Tout-Msg
         **/
        'msgSelector': {
            value: '.Tout-Msg'
        },

        /**
         * CSS selector to identify which element tout links should appear in.
         * @attribute linkSelector
         * @type String
         * @default .Tout-Link
         **/
        'linkSelector': {
            value: '.Tout-Link'
        },

        /**
         * Tout element. Will be created automatically if not specified. You can pass in an Node, DOM element or CSS selector.
         * @attribute el
         * @type Node
         * @default created automatically when needed.
         **/
        'el': {
            value: null,
            setter: function(el, fullname) {
                return Y.one(el);
            }
        },

        /**
         * Optional reference element selector used for the Y position of the tout. If this element is in the viewport,
         * the tout will use it's Y position. If not, the tout will use the value in altY. Pass in a selector string
         * instead of an element if the element may be replaced due to dynamic data.
         * @attribute refEl
         * @type String|Node
         **/
        'refEl': {
            value: null
        },

        /**
         * Default Y position to position Tout when refEl isn't specified or when refEl is not in the viewport.
         * Takes a CSS length.
         * @attribute altY
         * @type String 
         * @default 0px
         **/
        'altY': {
            value: '0px'
        },

        /**
         * Amount of time to show regular messages (in seconds)
         * @attribute duration
         * @type Number
         * @default 3
         **/
        'duration': {
            value: 3
        },

        /**
          * Amount of time to show error messages (in seconds)
          * @attribute errorDuration
          * @type Number
          * @default 5
          **/
        'errorDuration': {
            value: 5
        }



    };

    ToutProto = {

        /**
         * Creates the tout, sets the message, positions the tout and shows the tout.
         * @method displayTout
         * @param {Object} msgObj Object containing the message and (optionally) the link for the tout. Should be in the form of:
         *      <br><pre>{
         *        "message": "Message goes here", 
         *        "error" : false, // optional boolean. When error is true, it'll display red error touts
         *         "link": { // optional
         *            "href": "..." // url for link (defaults to "#")
         *            "text": "Link text",
         *            "fn": someFunction // Function to execute when link is clicked.
         *          }
         *       }</pre>
         **/
        displayTout: function(msgObj) {
            var msg = msgObj.message,
                linkObj = msgObj.link;

            this.setToutMessage(msg);
            if (Y.Lang.isObject(linkObj)) {
                this.setToutLink(linkObj);
            } else {
                this.setToutLink(null);
            }

            this.showTout(msgObj.error);
        },

        /**
         * Sets the Message for the tout. Called automatically by displayTout()
         * @method setToutMessage
         * @param {String} msg Message
         **/
        setToutMessage: function(msg) {
            var el, msgEl;
            el = this.getToutEl();
            if (el) {
                msgEl = el.one(this.get('msgSelector'));
            }
            if (msgEl) {
                msgEl.setHTML(msg);
            }
        },
        /**
         * Sets the link and link action for the tout. See displayTout() for documentatino on format.
         * @method setToutLink
         * @param {Object|Null} linkObj Object describing link text, url and function.
         **/
        setToutLink: function(linkObj) {
            var el = this.getToutEl(),
                linkEl,
                href,
                text,
                fn;
            linkEl = el.one(this.get('linkSelector'));

            if (!linkObj || !linkObj.text) {
                linkEl.setAttribute('href', '#');
                linkEl.setHTML('');
            } else {
                href = linkObj.href || '#';
                text = linkObj.text;
                fn = linkObj.fn;

                linkEl.setAttribute('href', href);
                linkEl.setHTML(text);
                linkEl.purge();
                if (fn) {
                    linkEl.once('click', fn);
                }
            }
        },

        /**
         * Positions tout. Sets the Tout's Y position to match either the refEl (if specified and in viewport) 
         * or the altY attribute.
         * @method positionTout
         * 
         **/
        positionTout: function() {
            var tout = this.getToutEl(),
                ref = this.get('refEl'),
                refEl,
                useAltY = false,
                refRegion, viewportRegion;

            if (ref) {
                refEl = Y.one(ref); 
            }

            if (refEl) {
                refRegion = refEl.get('region');
                viewportRegion = refEl.get('viewportRegion');
                if (refEl.inRegion(refEl.get('viewportRegion'), true)) {
                    tout.setStyle('top', (refRegion.top - viewportRegion.top) + 'px');
                } else {
                    useAltY = true;
                }
            } else {
                useAltY = true;
            }

            if (useAltY) {
                tout.setStyle('top', this.get('altY'));
            }
        },

        /**
         * Makes the Tout visible, and sets up a transition to hide it after three seconds.
         * @method showTout
         * @param {Boolean} isError If true, displays error-style tout.
         **/
        showTout: function(isError) { // todo: Fix/alter to avoid boolean trap.
            var tout = this.getToutEl(),
                toutDuration = isError ? this.get('errorDuration') : this.get('duration');
            if (isError) {
                tout.addClass('Tout-error');
            } else {
                tout.removeClass('Tout-error');
            }
            this.positionTout();
            tout.setStyles({'display': 'block', 'opacity': 0});

            // fade in the tout
            tout.transition({
                duration: 0.2,
                opacity: 1
            },
            function() {
                // then fade it out
                this.transition({
                    duration: 0.25,
                    delay: toutDuration,
                    opacity: 0
                },
                function() {
                    // then set display none
                    this.setStyle('display', 'none');
                });
            });
        },

        /**
         * Creates the Tout node and sets the "el" attribtue to it. Uses the template attribute when creating the tout.
         * @method _createToutEl
         * @private
         * @return {Node} Newly created element.
         **/
        _createToutEl: function() {
            var template = this.get('template'),
                el = null;

            el = Y.Node.create(template);
            el.setStyle('display', 'none');
            Y.one('body').append(el);

            this.set('el', el);
            return el;
        },

        /**
         * Gets the tout node. Creates a tout node if none exists.
         * @method getToutEl
         * @return {Node} The el attribute.
         **/
        getToutEl: function() {
            var retEl = this.get('el');
            if (!retEl) {
                retEl = this._createToutEl();
            }
            return retEl;
        }
    };

    Y.extend(Tout, Y.Base, ToutProto);
    Y.namespace('Fantasy');
    Y.Fantasy.Tout = Tout;
}, '0.1', {'requires': ['node', 'base', 'transition']});