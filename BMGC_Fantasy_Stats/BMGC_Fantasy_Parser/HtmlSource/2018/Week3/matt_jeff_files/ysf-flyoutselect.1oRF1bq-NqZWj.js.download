YUI.add('ysf-flyout-select', function(Y) {
    function YSFFlyoutSelect(cfg) {
        YSFFlyoutSelect.superclass.constructor.apply(this, arguments);
    }

    YSFFlyoutSelect.Name = 'ysf-flyout-select';
    YSFFlyoutSelect.ATTRS = {
        'el': {
            'value': null,
            'setter': function(val, fullname) {
                return Y.one(val);
            }
        },
        'form': {
            'value': null
        },
        'li_classes': {
            'value': 'Navitem Grid-u Block'
        },
        'ul_classes': {
            'value': 'Nav-v Nav-plain Dropdown Nowrap No-p Box-shadow-botend Bdr-radius Bdr'
        },
        'use_link': {
            'value': false
        },
        'title_changed_listener': {
            'value': false
        }
    };
    Y.extend(YSFFlyoutSelect, Y.Base, {
        initializer: function(cfg) {
            this.set('form', this.get('el').one('form'));
            var title = this.get('el').getAttribute('title'),
                title_change = this.get('el').getAttribute('title-change');

            this.get('form').hide();

            var trigger = this.get('el').one('.flyout_trigger');

            if (this.get('el').hasAttribute('title-change')) {
                if (title_change === 'false') {
                    title_change = false;
                }
                this.set('title_changed_listener', title_change);
            }

            if (this.get('title_changed_listener') !== false) {
                this.setTitleCurrentSelected();
                // run set title current selected if change
                Y.on(this.get('title_changed_listener'),Y.bind(this.setTitleCurrentSelected, this));
            } else {
                trigger.one('.flyout-title').set('text',title);
            }

            // register trigger event
            trigger.on(['hover-intent','click','focus'], Y.bind(this.triggerHandler, this));
        },
        triggerHandler: function(e) {
            var self = this,
                select = this.get('el').one('select'),
                formVal = select.getAttribute('name'),
                globalClasses = '',
                globalAttrs = '';

            e.preventDefault();

            // if already showing, do nothing
            if (this.get('el').one('.Nav-flyout') !== null) {
                return;
            }

            // show popup
            var html = '<div class="Nav-flyout">';

            html+= '<div class="pointer-top"></div>';

            html += '<ul class="'+this.get('ul_classes')+'">';

            // do we need to make them dynamic
            if (select.hasAttribute('data-target')) {
                globalClasses += 'yfa-dynamic ';
                globalAttrs += 'data-target="'+select.getAttribute('data-target')+'" ';
            }

            this.get('form').all('option').each(function(opt) {
                var classes = 'Navtarget',
                    attrs = '';
                if (opt.hasAttribute('selected')) {
                    classes += ' Fw-b';
                }

                if (opt.hasAttribute('accent')) {
                    classes += ' F-accent';
                } else {
                    classes += ' F-shade';
                }

                if (opt.hasAttribute('data-name')) {
                    classes += ' ' + opt.getAttribute('data-name');
                }

                html += '<li class="'+self.get('li_classes')+'">';

                // sorta hack, no dynamic if it's a link
                if (opt.get('value').indexOf('http') !== -1) {
                    globalAttrs = '';
                    globalClasses = '';
                }

                if (self.get('use_link') || self.get('el').hasAttribute('data-uselink')) {
                    html += '<a class="'+classes+' '+globalClasses+'"href="'+opt.get('value')+'" '+attrs+' '+globalAttrs+'>'+opt.get('text')+'</a>';
                } else {
                    html += '<a class="'+classes+' '+globalClasses+'"href="?'+formVal+'='+opt.get('value')+'" '+attrs+' '+globalAttrs+'>'+opt.get('text')+'</a>';
                }

                html += '</li>';
            });

            html += '</ul>';

            html += '</div>';

            this.get('el').append(html);

            var flyout = this.get('el').one('.Nav-flyout'),
                flyoutWidth = parseInt(flyout.getComputedStyle('width'), 10),
                parentWidth = parseInt(this.get('el').getComputedStyle('width'), 10);

            // If computed style is greater than width of parent do some shifting son
            if (flyoutWidth > parentWidth) {
                flyout.setStyle('left', -1 * ((flyoutWidth - parentWidth)/2));
            }

            // disappear click
            Y.later(1, this, Y.bind(this.closeTrigger, this), document.body, null, this.get('el'));
        },
        closeTrigger: function(e) {
            var self = this;
            var eventHandle = self.get('el').one('.Nav-flyout').ancestor().on(['mouseleave','focusoutside'], function(e) {
                if (self.get('el').one('.Nav-flyout') !== null) {
                    self.get('el').one('.Nav-flyout').remove();
                }
                eventHandle.detach();
            });
        },
        setTitleCurrentSelected: function(e) {
            var select = this.get('el').one('select'),
                selected = select.all('option').item(select.get('selectedIndex')),
                trigger = this.get('el').one('.flyout_trigger'),
                firstOpt = select.one('option');


            // Our menu probably just changed, so that means we shouldn't show it if it's open
            if (this.get('el').one('.Nav-flyout') !== null) {
                this.get('el').one('.Nav-flyout').remove();
            }

            if (e !== undefined && e.select === select) {
                if (e.hidden === true) {
                    this.get('el').hide();
                } else {
                    this.get('el').show();
                }
            }

            if (selected !== null) {
                trigger.one('.flyout-title').set('text',selected.get('text'));
            } else {
                if (firstOpt !== null) {
                    trigger.one('.flyout-title').set('text',firstOpt.get('text'));
                }
            }

            // if we have a prev and next + have both pills, then update the buttons
            var next = select.one('[next]'),
                prev = select.one('[prev]'),
                nextButton = this.get('el').one('.Js-next'),
                prevButton = this.get('el').one('.Js-prev');



            if (nextButton !== null) {
                if (next !== null) {
                    nextButton.removeClass('Btn-disabled');
                    nextButton.set('href', next.get('value'));
                    if (select.hasAttribute('data-target')) {
                        nextButton.addClass('yfa-dynamic');
                        nextButton.setAttribute('data-target', select.getAttribute('data-target'));
                    }
                } else {
                    nextButton.addClass('Btn-disabled');
                }
            }

            if (prevButton !== null) {
                if (prev !== null) {
                    prevButton.removeClass('Btn-disabled');
                    prevButton.set('href', prev.get('value'));
                    if (select.hasAttribute('data-target')) {
                        prevButton.addClass('yfa-dynamic');
                        prevButton.setAttribute('data-target', select.getAttribute('data-target'));
                    }
                } else {
                    prevButton.addClass('Btn-disabled');
                }
            }
        }
    });

    Y.namespace('Fantasy');
    Y.Fantasy.FlyoutSelect = YSFFlyoutSelect;
}, '1.0', {'requires': ['node', 'hover-intent','event', 'event-hover', 'base','event-outside']});
