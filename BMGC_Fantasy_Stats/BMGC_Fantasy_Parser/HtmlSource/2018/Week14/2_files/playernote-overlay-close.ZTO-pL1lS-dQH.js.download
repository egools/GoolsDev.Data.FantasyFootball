YUI.add('media-overlay-close', function (Y) {
    Y.namespace('Sports.Plugin.Overlay.Close');

    Y.Sports.Plugin.Overlay.Close = Y.Base.create('YSOverlayClosePlugin', Y.Plugin.Base, [], {

        _handles: {},

        initializer: function () {
            var oPlug = this,
                oHost = oPlug.get('host');

            if (oHost.get('rendered')) {
                oPlug.bindUI();
            } else {
                oPlug._handles.afterHostBindUI = oPlug.afterHostMethod('bindUI', function () {
                    oPlug.bindUI();
                    oPlug._handles.afterHostBindUI.detach();
                    delete oPlug._handles.afterHostBindUI;
                });
            }
        },

        bindUI: function () {
            var oPlug = this,
                oHost = oPlug.get('host');

            oPlug._handles.afterHostVisibleChange = oHost.after('visibleChange', Y.bind(oPlug.afterHostVisibleChange, oPlug));
        },

        _bindClickAnywhereToClose: function () {
            var oPlug = this;

            if (oPlug.get('clickAnywhereToClose.enabled') && !oPlug._handles.onClickAnywhereToCloseClick) {
                oPlug._handles.onClickAnywhereToCloseClick = Y.one('body').on('click', Y.bind(oPlug.onClickAnywhereToCloseClick, oPlug));
            }
        },

        _detachClickAnywhereToClose: function () {
            var oPlug = this;

            if (oPlug._handles.onClickAnywhereToCloseClick) {
                oPlug._handles.onClickAnywhereToCloseClick.detach();
                delete oPlug._handles.onClickAnywhereToCloseClick;
            }
        },

        _bindEsc: function () {
            var oPlug = this;

            if (oPlug.get('esc') && !oPlug._handles.onEscKeyUp) {
                oPlug._handles.onEscKeyUp = Y.on('key', Y.bind(oPlug.onEscKeyUp, oPlug), 'body', 'up:27');
            }
        },

        _detachEsc: function () {
            var oPlug = this;

            if (oPlug._handles.onEscKeyUp) {
                oPlug._handles.onEscKeyUp.detach();
                delete oPlug._handles.onEscKeyUp;
            }
        },

        afterHostVisibleChange: function (e) {
            var oPlug = this;

            if (e.newVal) {
                oPlug._bindClickAnywhereToClose();
                oPlug._bindEsc();
            } else {
                oPlug._detachClickAnywhereToClose();
                oPlug._detachEsc();
            }
        },

        onClickAnywhereToCloseClick: function (e) {
            var oPlug = this,
                oHost = oPlug.get('host'),
                boundingBox = oHost.get('boundingBox'),
                aIgnore = oPlug.get('clickAnywhereToClose.ignore'),
                targetNode = e.target,
                ignore = (function () {
                    var ignore = false;
                    Y.some(aIgnore, function (n) {
                        if (targetNode.ancestor(function (n1) {
                            return n.compareTo(n1); 
                        }, true)) {
                            ignore = true;
                            return true;
                        }
                    });

                    return ignore;
                })();

            if (!boundingBox.contains(targetNode) && !ignore) {
                oHost.hide();
            }
        },

        onEscKeyUp: function () {
            var oPlug = this,
                oHost = oPlug.get('host');

            oHost.hide();
        },

        onCloseClick: function (e) {
            e.halt();

            var oPlug = this,
                oHost = oPlug.get('host');

            oHost.hide();
        }
    }, {
        ATTRS: {

            'clickAnywhereToClose': {

                value: {
                    'enabled': false,
                    'ignore': []
                },

                validator: function (val) {
                    var valid = true;

                    if (!Y.Lang.isObject(val)) {
                        return false;
                    }

                    Y.some(val, function (v, k) {
                        if (k !== 'ignore' && k !== 'enabled') {
                            Y.log('Key passed to clickAnywhereToClose setter is invalid');
                            valid = false;

                            return true;
                        }
                        if ((k === 'enabled' && !Y.Lang.isBoolean(v)) || (k === 'ignore' && !Y.Lang.isArray(v))) {
                            Y.log('Value passed to clickAnywhereToClose.' + k + ' was of wrong type.');
                            valid = false;

                            return true;
                        }
                    });

                    return valid;
                },

                setter: function (val) {
                    var oPlug = this,
                        oHost = oPlug.get('host');

                    Y.later(0, {}, function () {
                        if (val.enabled && oHost.get('visible')) {
                            oPlug._bindClickAnywhereToClose();
                        } else if (!val.enabled) {
                            oPlug._detachClickAnywhereToClose();
                        }
                    });
                },

                lazyAdd: false
            },

            'ignore': {
                value: [],

                validator: Y.Lang.isArray,

                setter: function (val) {
                    var nodes = [],
                        node = null;

                    Y.each(val, function (v) {
                        if (Y.Lang.isString(v)) {
                            node = Y.one(v);
                            if (node) {
                                nodes.push(node);
                            }
                        } else if (Y.instanceOf(v, Y.Node)) {
                            nodes.push(v);
                        } else {
                            return Y.Attribute.INVALID_VALUE;
                        }
                    });
                }
            },

            'esc': {
                value: false,

                validator: Y.Lang.isBoolean,

                setter: function (val) {
                    var oPlug = this,
                        oHost = oPlug.get('host');

                    Y.later(0, {}, function () {
                        if (val && oHost.get('visible')) {
                            oPlug._bindEsc();
                        } else if (!val) {
                            oPlug._detachEsc();
                        }
                    });
                },

                lazyAdd: false
            },

            'closers': {
                value: null,

                validator: Y.Lang.isArray,

                setter: function (val) {
                    var oPlug = this,
                        oHost = oPlug.get('host'),
                        boundingBox = oHost.get('boundingBox');

                    Y.each(oPlug._handles, function (v, k) {
                        if (k.indexOf('onCloserClick') === 0) {
                            v.detach();
                            delete k[v];
                        }
                    });

                    Y.each(val, function (v, i) {
                        if (Y.Lang.isString(v)) {
                            oPlug._handles['onCloserClick' + i] = boundingBox.delegate('click', Y.bind(oPlug.onCloseClick, oPlug), v);
                        }
                    });
                },

                lazyAdd: false
            }
        },
        NS: 'ysclose'
    });
}, '', { 'requires': ['plugin', 'base-build', 'node-event-delegate', 'event-key'] });