/* jslint sloppy:true, nomen:true, white:true, unparam:true, regexp:true*/
/*global YUI*/

YUI.add('ysf-xhr', function(Y) {
/**
* Provides the class for Y.Fantasy.XHR
* @module ysf-xhr
**/

    /**
* Y.Fantasy.XHR provides a flexible, extensible, easy
* interface for creating components, modules and widgets
* that use Ajax.
* @param config {Object} Object literal specifying widget configuration properties.
* @class XHR
* @constructor
* @extends Base
**/

    var XHR_proto, XHR_static;

    function YSFXHR(config) {
        YSFXHR.superclass.constructor.apply(this, arguments);
    }

    YSFXHR.NAME = 'xhr';
    YSFXHR.ATTRS = {
        /**
         * Whether instances should be automatically registered. 
         * Auto-registered modules run XHR.register() on initialization,
         * setting up triggers and handlers.
         * @attribute autoRegister
         * @type Boolean
         * @default true
         **/
        'autoRegister': {
            'value': true
        },
        /**
         * True when registration has been completed.
         * @attribute isRegistered
         * @type Boolean
         * @default false
         **/
        'isRegistered': {
            'value': false
        },
        /**
         * Type of event this instance should listen to.
         * @attribute eventType
         * @type String|Array
         * @default "submit" if the "form" attribute has a value, otherwise "click"
         **/
        'eventType': {
            'value': 'click',
            'valueFn': function() {
                if (this.get('form')) {
                    return 'submit';
                }
            }
        },
        /**
         * Should be set to the form element if the XHR instance
         * is responding to a form
         * @attribute form
         * @type Node
         **/
        'form': {
            'value': null
        },
        'el': {
            'value': null
        },

        /**
         * Object containing callback functions for XHR requests. Callback functions
         * take the form function(cId, response) {...}, where cId is the connection id
         * and response is the XHR response (if applicable).
         * @attribute callbackObj
         * @type Object
         * @default Object with simple success() and failure() handlers that log
         * information to the console.
         **/
        'callbackObj': {
            'value': {
                'success': function(cId, response) {
                    Y.log('Connection ' + cId + ': success', 'info', 'Y.Fantasy.XHR');
                },
                'failure': function(cId, response) {
                    Y.log('Connection ' + cId + ': failure', 'error', 'Y.Fantasy.XHR');
                }
            }
        },
        /**
         * Array of elements that act as triggers to initiate an XHR element, or as the parent
         * for delegated events.
         * @attribute triggers
         * @type Selector|Node|NodeList|Array of selectors
         **/
        'triggers': {
            'value': [],
            'setter': function(triggers, fullname) {
                var triggersAr = [];
                if (Y.Lang.isArray(triggers) || triggers instanceof Y.NodeList) {
                    Y.each(triggers, function(thisTrigger) {
                        var triggerNode = Y.one(thisTrigger);
                        if (triggerNode) {
                            triggersAr.push(triggerNode); 
                        }
                    });
                } else {
                    if (triggers === Y) {
                        triggersAr.push(triggers);
                    } else {
                        triggersAr.push(Y.one(triggers));
                    }
                }
                return triggersAr;
            }
        },

        /**
         * Selector string to use to set up delegates. Setting this will create
         * a delegate in the form of: trigger.delegate( eventType, callbackObj, triggerDelegate)
         * @attribute triggerDelegate
         * @type String
         */
        'triggerDelegate': {
            value: null
        },

        /**
         * Function to run when trigger or delegate is activated by the event specified in eventType
         * @attribute triggerHandler
         * @type Function
         * @default Function that either submits the form over XHR or requests the elements href over XHR
         */
        'triggerHandler': {
            'value': function(e, obj) {
                var connection;
                // e.preventDefault();
                try {
                    if (obj.get('form')) {
                        connection = obj.submit(this);
                    } else {
                        connection = obj.fetch(this);
                    }
                    if (connection) {
                        e.preventDefault();
                    }
                } catch (err) { 
                    Y.log(err); 
                }
            }
        },

        /**
         * Which connection is currently in progress
         * @attribute activeConnection
         * @type Integer
         **/
        'activeConnection': { 
            value: null
        },

        /*
         * Last md5 content hash (if one was provided). Used to determine if content should be updated
         * @attribtue lastHash
         * @type string
         **/
        'lastHash': {
            value: null
        }
    };
    
    XHR_proto = {
        initializer: function(cfg) {
            if (this.get('autoRegister')) {
                this.register();
            }
        },

        destructor: function() {
            this.detachTriggers();
        },

        detachTriggers: function() {
            var triggers = this.get('triggers');
            Y.Array.each(triggers, function(trigger) {
                trigger.detach('ysfxhr|*'); 
            });
        },

        /**
         * Sets up triggers and optional delegates, and sets isRegistered attribute to true
         *
         * @method register
         **/
        register: function() {
            if (this.get('form')) {
                this.set('triggers', this.get('form'));
            }
            var triggers = this.get('triggers'),
                delegate = this.get('triggerDelegate'),
                eventType = this.get('eventType'),
                eventTypes = Y.Lang.isArray(eventType) ? eventType : [eventType],
                self = this;

            

            Y.Array.each(eventTypes, function(evt) {
                Y.Array.each(triggers, function(trigger) {
                    if (Y.Lang.isString(delegate)) {
                        trigger.delegate('ysfxhr|' + evt, self.get('triggerHandler'), delegate, null, self);
                    } else {
                        trigger.on('ysfxhr|' + evt, self.get('triggerHandler'), null, self);
                    }
                });
            });

            this.set('isRegistered', true);
        },

        /**
         * Parses XHR response. Expects responses to be a JSON object
         * in the form of: 
         *     {"objects": [], "content": "", "errors": [] }
         * @method parseResponse
         * @param {Number} cId The connection if of the XHR request.
         * @param {Object} resp The XHR response (NOTE: Not just the response text)/
         * @return {Object} An object parsed from the responseText
         */
        parseResponse: function(cId, resp) {
            var obj = null; 
            if (resp.responseText) {
                try {
                    obj = Y.JSON.parse(resp.responseText);
                    this.checkForErrors(cId, obj);
                    obj.contentIsNew = this.checkContentHash(cId, obj);
                } catch (e) {
                    Y.log('Error parsing ajax', 'error', 'ysf-xhr');
                    Y.log(e);
                    if (Y.Af && Y.Af.Beacon) {
                        Y.Af.Beacon.error('ysf-xhr', {'connection': cId}, {code: 'parseError', message: 'error parsing XHR JSON response'});
                    }
                }
            }
            return obj;
        },
        _errorMap: { },

        /**
         * Returns true if the response contained one or more errors in the "errors" array.
         * Must be called after checkForErrors has been calleed for this request.
         * @method hasErrors
         * @param {Number} cId The id of the XHR request
         * @return {Boolean}
         */
        hasErrors: function(cId) {
            return this._errorMap[ cId ].hasErrors || false;
        },

        /**
         * Returns array of server-generated errors or null if the request contained no errors
         * @method getErrors
         * @param {Number} cId The id of the XHR request
         * @return {Null|Array} `null` or an array of errors
         */
        getErrors: function(cId) {
            var errors = null;
            if (this.hasErrors(cId)) {
                errors = this._errorMap[ cId ].errors;
            }
            return errors;
        },

        /**
         * Examines the errors array of a parsed response, looking for server-generated errors.
         * @method checkForErrors
         * @param {Number} cId the id of the XHR request
         * @param {Object} obj Object returned from XHR.parseRequest()
         * @return {Object} Object in the form of:
         *     {"hasErrors": true|false, "errors": [] }
         */
        checkForErrors: function(cId, obj) {
            var errorRef = {
                    'hasErrors': false,
                    'errors': []
                },
                x;
            this._errorMap[ cId ] = errorRef;
            if (obj && Y.Lang.isArray(obj.errors) && obj.errors.length) {
                for (x=0; x<obj.errors.length; x+=1) {
                    if (obj.errors[x].code) {
                        errorRef.hasErrors = true;
                        errorRef.errors.push(obj.errors[x]);
                    }
                }
            }
            return errorRef;
        },

        /**
         * Checks if content hash differs from the previous value
         * @method checkContentHash
         * @param {Number} cId the id of the XHR request
         * @param {Object} obj Object returned from XHR.parseRequest();
         * @return {Boolean} returns false only when the lastHash and the obj.hash are both non-empty strings that are exactly equal
         */
        checkContentHash: function(cId, obj) {
            var oldHash = this.get('lastHash'),
                newHash = obj.hash,
                canCompare = true,
                updateHash = true;

            if (!Y.Lang.isString(oldHash) || oldHash === '') {
                canCompare = false;
            }

            if (canCompare && (!Y.Lang.isString(newHash) || newHash === '')) {
                canCompare = false;
                updateHash = false;
            }

            if (updateHash) {
                this.set('lastHash', newHash);
            }
            return canCompare ? oldHash !== newHash : true;
        },

        /**
         * Fetches an url over XHR, using the instance's callbackObj attribute
         * @method fetch
         * @param {Node} Element (usually an &gt;a&lt; tag) that is treated as the originator of the request.
         * @param {String} [href] An optional URL that will be fetched. If not present, fetch() will attempt to use the href from `el`
         * @param {Boolean} [sync] Wheter the request should be synchronous. Defaults to `false`
         * @return {Object} YUI IO connection object
         **/
        fetch: function(el, href, sync) {
            var self = this,
                connection,
                fetchHref = Y.Lang.isString(href) ? href : el.getAttribute('href'), cfg = {};

            if (el) {
                el.addClass('loading'); 
            }

            if (sync) {
                cfg.sync = true;
            }
            
            connection = Y.Fantasy.XHR.fetchFromAjaxWithCfg(
                cfg,
                fetchHref,
                this.get('callbackObj'),
                el,
                self,
                true
            );

            this.set('activeConnection', connection);
            return connection;
        },

        /**
         * Like fetch(), but for forms.
         * @method submit
         * @param {Node} form Form element to submit over XHR
         * @return {Object} YUI IO connection object.
         **/
        submit: function(form) {
            var self = this, 
                connection;

            connection = Y.Fantasy.XHR.submitToAjax(
                form, 
                this.get('callbackObj'),
                null,
                self
            );

            this.set('activeConnection', connection);
            return connection;
        }
    };

    XHR_static = {
        transactionMap: [],

        /**
         * Adds an XHR transaction and associated element to the internal transaction map. Called automatically by 
         * `Y.Fantasy.XHR.fetchFromAjax()` and `Y.Fantasy.XHR.submitToAjax`.
         * @method addTransaction
         * @static
         * @param {Object} connection The XHR connection object.
         * @param {Node} An associated element.
         **/
        addTransaction: function(connection, el) {
            var n = el ? Y.one(el) : null;
            Y.Fantasy.XHR.transactionMap[connection.id] = n;
        },

        /**
         * Gets the associated element for a transaction. Useful for knowing which element should be acted upon in XHR request callbacks.
         * @method getTransaction
         * @static
         * @param {Object|Number} Connection or connection id
         * @return {Node|undefined} Associated element or undefined.
         */
        getTransaction: function(connection) {
            var cId = Y.Lang.isObject(connection) ? connection.id : connection;
            return Y.Fantasy.XHR.transactionMap[cId];
        },

        /**
         * Fetches an url over Y.IO, configured using a cfg object. If no Y.IO configuration is required, it's usually easier to call Y.Fantasy.XHR.fetchFromAjax()
         * @method fetchFromAjaxWithCfg
         * @static
         * @param {Object} cfg configuration for Y.IO
         * @param {String} href The url to fetch
         * @param {Object} callback Object with callback functions for success, failure and other XHR events.
         * @param {Node} [triggerEl] Optional element to associate with this request.
         * @param {Object} [context] Optional context to for callback's `this`.
         * @param {Boolean} [asGet] Whether to fetch the request as a GET or POST request. Defaults to "POST"
         * @return {Object} YUI.IO connection object.
        **/
        fetchFromAjaxWithCfg: function(cfg, href, callback, triggerEl, context, asGet) {
            var XHRMethod = asGet ? 'GET' : 'POST',
                base, query, queryobj, hrefFrags, queryAr, connection, x,
                io_cfg = Y.Lang.isObject(cfg) ? cfg : {};
            io_cfg.headers = io_cfg.headers || {};
            io_cfg.headers['Ajax-Request'] = 'true';

            try {
                if (XHRMethod==='GET') {
                    base = href.replace(/(\#.*)$/, '');
                    query = null;

                    base += (/\?/.test(base)) ? '&' : '?';
                    base += 'ajaxrequest=1';
                } else {
                    hrefFrags = href.split('?');
                    base = hrefFrags[0];
                    query = null;
                    if (hrefFrags.length > 1) {
                        queryAr = [];
                        for (x=1; x<hrefFrags.length; x+=1) { 
                            queryAr[queryAr.length] = hrefFrags[x];
                        }
                        query = queryAr.join(encodeURIComponent('?'));
                        queryobj = Y.QueryString.parse(query);
                        io_cfg.data = io_cfg.data || {};
                        io_cfg.data = Y.QueryString.stringify(Y.merge(io_cfg.data, queryobj), {arrayKey: true});
                    }
                }
                
                io_cfg.method = XHRMethod;
                io_cfg.on = callback;
                if (context) {
                    io_cfg.context = context;
                }
                
                connection = Y.io(base, io_cfg);
                Y.Fantasy.XHR.addTransaction(connection, triggerEl);

                callback.connections = callback.connections || {};
                callback.connections[connection.id] = connection;

 
                if (triggerEl) {
                    callback.triggered = callback.triggered || {};
                    callback.triggered[connection.id] = triggerEl;
                }
                if (callback.onConnect && typeof callback.onConnect === 'function') {
                    callback.onConnect(connection, href);
                }
                
                return connection;
            } catch (e) {
                Y.log(e, 'error', 'fetchFromAjax');
                return false;
            }
        },

        /**
         * Fetches an url over Y.IO. Internally, calls `Y.Fantasy.XHR.FetchFromAjaxWithCfg()`, passing a null configuration.
         * @method fetchFromAjax
         * @static
         * @param {String} href The url to fetch
         * @param {Object} callback Object with callback functions for success, failure and other XHR events.
         * @param {Node} [triggerEl] Optional element to associate with this request.
         * @param {Object} [context] Optional context to for callback's `this`.
         * @param {Boolean} [asGet] Whether to fetch the request as a GET or POST request. Defaults to "POST"
         * @return {Object} YUI.IO connection object.
        **/         
        fetchFromAjax: function(href, callback, triggerEl, context, asGet) {
            return Y.Fantasy.XHR.fetchFromAjaxWithCfg(null, href, callback, triggerEl, context, asGet);
        },

        /**
         * Submits a form over `Y.IO`. Like `fetchFromAjax()`, only for forms.
         * @method submitToAjax
         * @static
         * @param {Node|Selector} formref Form node or selector for form.
         * @param {Object} callback Object with callback functions for success, failure and other XHR events.
         * @param {Function} [validationFunc] Function to validate the form against. If this returns false, the request will not be made.
         * @param {Object} [context] Optional context to for callback's `this`.
         * @return {Object} YUI.IO connection object.
        **/
        submitToAjax: function(formref, callback, validationFunc, context, triggerEl) {
            // safelog("SubmitToAjax: " + form.action, "info", "submitToAjax");
            var form = Y.one(formref),
                isValid = true,
                connection,
                io_cfg = {
                    'headers': { 
                        'Ajax-Request': 'true' 
                    },
                    'form': {
                        'id': form
                    },
                    'method': 'POST'
                };

            if (Y.Lang.isFunction(validationFunc)) {
                isValid = validationFunc(form);
            }

            if (isValid) {
                try {
                    io_cfg.on = callback;
                    if (context) {
                        io_cfg.context = context;
                    }

                    connection = Y.io(form.getAttribute('action'), io_cfg);
                    callback.connections = callback.connections || {};
                    callback.connections[connection.id] = connection;
                    callback.submitted_forms = callback.submitted_forms || {};
                    callback.submitted_forms[connection.id] = form;
                    Y.Fantasy.XHR.addTransaction(connection, form);
                    return connection;
                } catch (e) {
                    Y.log(e, 'error', 'submitToAjax');
                    return false;
                }
            } else {
                return false;
            }
        }
    };

    Y.extend(YSFXHR, Y.Base, XHR_proto, XHR_static);

    Y.namespace('Fantasy');
    Y.Fantasy.XHR = YSFXHR;
}, '0.2', {'requires': ['io-base', 'io-form', 'base', 'node', 'json-parse', 'querystring-stringify-simple', 'querystring-parse-simple']});