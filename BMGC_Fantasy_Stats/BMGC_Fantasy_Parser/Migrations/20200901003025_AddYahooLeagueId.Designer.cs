// <auto-generated />
using System;
using FantasyParser;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FantasyParser.Migrations
{
    [DbContext(typeof(FantasyFootballContextLocal))]
    [Migration("20200901003025_AddYahooLeagueId")]
    partial class AddYahooLeagueId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FantasyComponents.Draft", b =>
                {
                    b.Property<Guid>("DraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<int>("DraftType")
                        .HasColumnType("int");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DraftId");

                    b.HasIndex("SeasonId")
                        .IsUnique();

                    b.ToTable("Drafts");
                });

            modelBuilder.Entity("FantasyComponents.DraftedPlayer", b =>
                {
                    b.Property<Guid>("DraftedPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DraftPosition")
                        .HasColumnType("int");

                    b.Property<Guid?>("ManagerSeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NFLPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Round")
                        .HasColumnType("int");

                    b.HasKey("DraftedPlayerId");

                    b.HasIndex("ManagerSeasonId");

                    b.HasIndex("NFLPlayerId");

                    b.ToTable("DraftedPlayers");
                });

            modelBuilder.Entity("FantasyComponents.EloRating", b =>
                {
                    b.Property<Guid>("EloRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Change")
                        .HasColumnType("int");

                    b.Property<int>("ChangeAdjusted")
                        .HasColumnType("int");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MarginModifier")
                        .HasColumnType("float");

                    b.Property<int>("PreviousRating")
                        .HasColumnType("int");

                    b.Property<int>("PreviousRatingAdjusted")
                        .HasColumnType("int");

                    b.Property<double>("ProjectedModifier")
                        .HasColumnType("float");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("EloRatingId");

                    b.HasIndex("ManagerId");

                    b.ToTable("EloScores");
                });

            modelBuilder.Entity("FantasyComponents.League", b =>
                {
                    b.Property<Guid>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FantasyComponents.Manager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearJoined")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("FantasyComponents.ManagerSeason", b =>
                {
                    b.Property<Guid>("ManagerSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MovesMade")
                        .HasColumnType("int");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradesMade")
                        .HasColumnType("int");

                    b.HasKey("ManagerSeasonId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("ManagerSeasons");
                });

            modelBuilder.Entity("FantasyComponents.Matchup", b =>
                {
                    b.Property<Guid>("MatchupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Roster1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Roster2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchupId");

                    b.HasIndex("Roster1Id")
                        .IsUnique()
                        .HasFilter("[Roster1Id] IS NOT NULL");

                    b.HasIndex("Roster2Id")
                        .IsUnique()
                        .HasFilter("[Roster2Id] IS NOT NULL");

                    b.HasIndex("SeasonId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("FantasyComponents.MatchupPlayer", b =>
                {
                    b.Property<Guid>("MatchupPlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ActualPoints")
                        .HasColumnType("real");

                    b.Property<string>("GameResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchupPosition")
                        .HasColumnType("int");

                    b.Property<Guid?>("MatchupRosterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NFLPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ProjectedPoints")
                        .HasColumnType("real");

                    b.Property<string>("StatBlock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchupPlayerID");

                    b.HasIndex("NFLPlayerId");

                    b.ToTable("MatchupPlayers");
                });

            modelBuilder.Entity("FantasyComponents.MatchupRoster", b =>
                {
                    b.Property<Guid>("RosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActualScore")
                        .HasColumnType("float");

                    b.Property<Guid?>("ManagerSeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MatchupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ProjectedScore")
                        .HasColumnType("float");

                    b.HasKey("RosterId");

                    b.HasIndex("ManagerSeasonId");

                    b.HasIndex("MatchupId");

                    b.ToTable("MatchupRosters");
                });

            modelBuilder.Entity("FantasyComponents.NFLPlayer", b =>
                {
                    b.Property<Guid>("NFLPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NFLPosition")
                        .HasColumnType("int");

                    b.Property<string>("PFRUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamsString")
                        .IsRequired()
                        .HasColumnName("Teams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YahooId")
                        .HasColumnType("int");

                    b.HasKey("NFLPlayerId");

                    b.ToTable("NFLPlayers");
                });

            modelBuilder.Entity("FantasyComponents.Season", b =>
                {
                    b.Property<Guid>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DraftId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeagueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeasonLeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YahooLeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("SeasonId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("FantasyComponents.Draft", b =>
                {
                    b.HasOne("FantasyComponents.Season", null)
                        .WithOne("Draft")
                        .HasForeignKey("FantasyComponents.Draft", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FantasyComponents.DraftedPlayer", b =>
                {
                    b.HasOne("FantasyComponents.ManagerSeason", null)
                        .WithMany("DraftedPlayers")
                        .HasForeignKey("ManagerSeasonId");

                    b.HasOne("FantasyComponents.NFLPlayer", "NFLPlayer")
                        .WithMany()
                        .HasForeignKey("NFLPlayerId");
                });

            modelBuilder.Entity("FantasyComponents.EloRating", b =>
                {
                    b.HasOne("FantasyComponents.Manager", null)
                        .WithMany("EloScores")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FantasyComponents.ManagerSeason", b =>
                {
                    b.HasOne("FantasyComponents.Manager", null)
                        .WithMany("ManagerSeasons")
                        .HasForeignKey("ManagerId");

                    b.HasOne("FantasyComponents.Season", null)
                        .WithMany("ManagerSeasons")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("FantasyComponents.Matchup", b =>
                {
                    b.HasOne("FantasyComponents.MatchupRoster", "Roster1")
                        .WithOne()
                        .HasForeignKey("FantasyComponents.Matchup", "Roster1Id");

                    b.HasOne("FantasyComponents.MatchupRoster", "Roster2")
                        .WithOne()
                        .HasForeignKey("FantasyComponents.Matchup", "Roster2Id");

                    b.HasOne("FantasyComponents.Season", null)
                        .WithMany("Matchups")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("FantasyComponents.MatchupPlayer", b =>
                {
                    b.HasOne("FantasyComponents.MatchupRoster", null)
                        .WithMany("MatchupPlayers")
                        .HasForeignKey("MatchupPlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyComponents.NFLPlayer", "NFLPlayer")
                        .WithMany()
                        .HasForeignKey("NFLPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FantasyComponents.MatchupRoster", b =>
                {
                    b.HasOne("FantasyComponents.ManagerSeason", null)
                        .WithMany("Rosters")
                        .HasForeignKey("ManagerSeasonId");

                    b.HasOne("FantasyComponents.Matchup", "Matchup")
                        .WithMany()
                        .HasForeignKey("MatchupId");
                });

            modelBuilder.Entity("FantasyComponents.Season", b =>
                {
                    b.HasOne("FantasyComponents.League", null)
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId");
                });
#pragma warning restore 612, 618
        }
    }
}
