/* jshint unused:false*/
YUI.add('media-playernotes', (function () {
    var PlayerNotes = null,
        oNotes = {},
        oOpenNote = null;

    return function (Y) {
        Y.namespace('Sports');

        var prevNextTemplate = '<a class="playernote-prev">Previous Player</a> | <a class="playernote-next">Next Player</a>',
            prevTemplate = '<a class="playernote-prev">Previous Player</a>',
            nextTemplate = '<a class="playernote-next">Next Player</a>',

            generatePlayerNote = function (anchorNode) {
                var pid = '',
                    oNote = null,
                    initialLoad, // eslint-disable-line no-unused-vars
                    enumerate;

                oNote = new Y.Sports.PlayerNote({
                    noteNode: anchorNode,
                    pidParser: PlayerNotes.get('pidParser'),
                    zIndex: PlayerNotes.get('zIndex')
                }).render();

                initialLoad = PlayerNotes.get('initialLoad');
                enumerate = PlayerNotes.get('enumerate');

                oNote.set('noteUrlFormatter', Y.bind(PlayerNotes.get('noteUrlFormatter'), oNote));
                oNote.set('comscoreUrlFormatter', Y.bind(PlayerNotes.get('comscoreUrlFormatter'), oNote));

                oNote.yssurround.set('surround.node', anchorNode);
                oNote.ysclose.set('clickAnywhereToClose.ignore', [anchorNode]);

                pid = oNote.get('pid');

                PlayerNotes._handles[pid] = {};

                if (enumerate) {
                    PlayerNotes._handles[pid].afterInitialLoadEnumerate = oNote.after('initialLoad', Y.bind(afterInitialLoadEnumerate, oNote)); // eslint-disable-line no-use-before-define
                }

                oNotes[pid] = oNote;

                return oNotes[pid];
            },

            showPlayerNote = function (anchorNode) {
                var pid = PlayerNotes.get('pidParser')(anchorNode),
                    href = null,
                    oNote = null;

                if (pid) {
                    anchorNode.focus();

                    if (!oNotes[pid]) {
                        oNotes[pid] = 'loading';
                        oNote = generatePlayerNote(anchorNode);
                        oNote.show();
                    } else if (oNotes[pid] === 'loading' || oNotes[pid].get('visible')) {
                        return;
                    } else {
                        oNote = oNotes[pid];
                        oNote.set('pid', pid).yssurround.set('surround.node', anchorNode);
                        oNote.ysclose.set('clickAnywhereToClose.ignore', [anchorNode]);
                        oNote.show();
                    }

                    if (oOpenNote && oOpenNote !== oNote && oOpenNote.get('visible')) {
                        oOpenNote.hide();
                        anchorNode.blur();
                    }
                    oOpenNote = oNote;
                } else {
                    href = anchorNode.get('href');

                    if (href) {
                        window.open(href, 'sports');
                    }
                }
            },

            onEnumeratePrevClick = function (e) {
                e.halt();

                var oNote = this,
                    noteNode = oNote.get('noteNode'),
                    noteNodes = PlayerNotes.get('noteNodes'),
                    is_node = false;

                Y.Array.some(noteNodes, function (n, i) {
                    is_node = noteNode.compareTo(n);

                    if (is_node) {
                        oNote.hide();
                        showPlayerNote(noteNodes[i - 1]);

                        return true;
                    }
                });
            },

            onEnumerateNextClick = function (e) {
                e.halt();

                var oNote = this,
                    noteNode = oNote.get('noteNode'),
                    noteNodes = PlayerNotes.get('noteNodes'),
                    is_node = false;

                Y.Array.some(noteNodes, function (n, i) {
                    is_node = noteNode.compareTo(n);

                    if (is_node) {
                        oNote.hide();
                        showPlayerNote(noteNodes[i + 1]);

                        return true;
                    }
                });
            },

            bindEnumerate = function (oNote) {
                var contentBox = oNote.get('contentBox'),
                    pid = oNote.get('pid');

                PlayerNotes._handles[pid].onEnumeratePrevClick = contentBox.delegate('click', Y.bind(onEnumeratePrevClick, oNote), 'a.playernote-prev');
                PlayerNotes._handles[pid].onEnumerateNextClick = contentBox.delegate('click', Y.bind(onEnumerateNextClick, oNote), 'a.playernote-next');
            },

            afterInitialLoadEnumerate = function () {
                var oNote = this,
                    pid = oNote.get('pid'),
                    noteNode = oNote.get('noteNode'),
                    navNodes = oNote.get('contentBox').all('.playernote-nav'),
                    noteNodes = PlayerNotes.get('noteNodes'),
                    size = noteNodes.length,
                    noteIndex = Y.Array.indexOf(noteNodes, noteNode);

                if (PlayerNotes.get('enumerate') && navNodes && size > 1) {
                    if (noteIndex === 0) {
                        navNodes.setContent(nextTemplate);
                    } else if (noteIndex === (size - 1)) {
                        navNodes.setContent(prevTemplate);
                    } else {
                        navNodes.setContent(prevNextTemplate);
                    }

                    bindEnumerate(oNote);
                }

                PlayerNotes._handles[pid].afterInitialLoadEnumerate.detach();
                delete PlayerNotes._handles[pid].afterInitialLoadEnumerate;
            },

            detachEnumerate = function (oNote) {
                var pid = oNote.get('pid');

                Y.each(PlayerNotes._handles[pid], function (v, k, o) {
                    if (k.indexOf('onEnumerate') === '0') {
                        v.detach();
                        delete o[k];
                    }
                });
            },

            destroyEnumerate = function (oNote) { // eslint-disable-line no-unused-vars
                var navNodes = oNote.get('contentBox').all('.playernote-nav');

                if (navNodes) {
                    navNodes.each(function (n) {
                        n.clear(true);
                    });
                    detachEnumerate(oNote);
                }
            };

        if (!PlayerNotes) {
            PlayerNotes = Y.Base.create('YSPlayerNotes', Y.Base, [], {

                _handles: {},

                initializer: function () {
                    var oMod = this;

                    oMod._handles.afterNoteSelectorChange = oMod.after('noteSelectorChange', function () {
                        oMod._detachNoteDelegate();
                        oMod._bindNoteDelegate();
                    });

                    oMod._bindNoteDelegate();
                },

                _bindNoteDelegate: function () {
                    var oMod = this;

                    if (!oMod._handles.onBodyClick) {
                        oMod._handles.onBodyClick = Y.one(Y.config.doc).delegate('click', function (e) {
                            e.halt();

                            var anchorNode = e.currentTarget;
                            showPlayerNote(anchorNode);
                        }, oMod.get('noteSelector'));
                    }
                },

                _detachNoteDelegate: function () {
                    var oMod = this;

                    if (oMod._handles.onBodyClick) {
                        oMod._handles.onBodyClick.detach();
                        delete oMod._handles.onBodyClick;
                    }
                },

                destroyAllNotes: function () {
                    Y.each(oNotes, function (v) {
                        v.destroy();
                    });

                    oNotes = {};
                },

                destructor: function () {
                    var oMod = this;

                    oMod._handles.onBodyClick.detach();
                    oMod.destroyAllNotes();
                }

            }, {

                ATTRS: {

                    noteSelector: {

                        value: 'a.playernote[data-ys-playerid]',
                        validator: Y.Lang.isString,
                        lazyAdd: false

                    },

                    noteNodes: {
                        value: null,
                        setter: function () {
                            var oMod = this,
                                noteArray = [],
                                noteNodes = Y.all(oMod.get('noteSelector'));

                            noteNodes.each(function (node) {
                                if (oMod.get('pidParser')(node) !== null) {
                                    noteArray.push(node);
                                }
                            });

                            return noteArray;
                        },
                        writeOnce: true
                    },

                    pidParser: {

                        value: function (node) {
                            return node.getAttribute('data-ys-playerid');
                        },
                        validator: Y.Lang.isFunction,
                        setter: function (val) {
                            Y.each(oNotes, function (v) {
                                if (v !== 'loading') {
                                    v.set('pidParser', val);
                                }
                            });
                        }
                    },

                    noteUrlFormatter: {

                        value: function () {
                            return null;
                        },
                        validator: function (val) {
                            return Y.Lang.isFunction(val);
                        },
                        setter: function (val) {
                            Y.each(oNotes, function (v) {
                                if (v !== 'loading') {
                                    v.set('noteUrlFormatter', val);
                                }
                            });
                        }
                    },

                    comscoreUrlFormatter: {

                        value: function () {
                            return null;
                        },
                        validator: function (val) {
                            return Y.Lang.isFunction(val);
                        },
                        setter: function (val) {
                            Y.each(oNotes, function (v) {
                                if (v !== 'loading') {
                                    v.set('comscoreUrlFormatter', val);
                                }
                            });
                        }
                    },

                    zIndex: {
                        value: 0,
                        validator: Y.Lang.isNumber,
                        setter: function (val) {
                            Y.each(oNotes, function (v) {
                                if (v !== 'loading') {
                                    v.set('zIndex', val);
                                }
                            });
                        }
                    },

                    enumerate: {

                        value: false,
                        validator: Y.Lang.isBoolean,
                        lazyAdd: false

                    }
                }

            });

            PlayerNotes = new PlayerNotes();
        }

        Y.Sports.PlayerNotes = PlayerNotes;
    };
})(), '', { 'requires': ['node-event-delegate', 'base-build', 'selector-css3', 'media-playernote'] });
