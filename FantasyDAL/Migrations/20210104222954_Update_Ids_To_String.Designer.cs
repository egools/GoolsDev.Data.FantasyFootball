// <auto-generated />
using System;
using FantasyComponents;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FantasyComponents.Migrations
{
    [DbContext(typeof(FantasyFootballContext))]
    [Migration("20210104222954_Update_Ids_To_String")]
    partial class Update_Ids_To_String
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("FantasyComponents.Draft", b =>
                {
                    b.Property<string>("DraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<short?>("Budget")
                        .HasColumnType("smallint");

                    b.Property<int>("DraftType")
                        .HasColumnType("int");

                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DraftId");

                    b.HasIndex("SeasonId")
                        .IsUnique()
                        .HasFilter("[SeasonId] IS NOT NULL");

                    b.ToTable("Drafts", "ff");
                });

            modelBuilder.Entity("FantasyComponents.DraftedPlayer", b =>
                {
                    b.Property<string>("DraftedPlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short?>("DraftPosition")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsKeeper")
                        .HasColumnType("bit");

                    b.Property<string>("NFLPlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short?>("Price")
                        .HasColumnType("smallint");

                    b.Property<short?>("Round")
                        .HasColumnType("smallint");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DraftedPlayerId");

                    b.HasIndex("NFLPlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("DraftedPlayers", "ff");
                });

            modelBuilder.Entity("FantasyComponents.EloRating", b =>
                {
                    b.Property<string>("EloRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("Change")
                        .HasColumnType("smallint");

                    b.Property<short>("ChangeAdjusted")
                        .HasColumnType("smallint");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MarginModifier")
                        .HasColumnType("real");

                    b.Property<string>("NextEloRatingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("PreviousRating")
                        .HasColumnType("smallint");

                    b.Property<short>("PreviousRatingAdjusted")
                        .HasColumnType("smallint");

                    b.Property<float>("ProjectedModifier")
                        .HasColumnType("real");

                    b.Property<byte>("Week")
                        .HasColumnType("tinyint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("EloRatingId");

                    b.ToTable("EloScores", "ff");
                });

            modelBuilder.Entity("FantasyComponents.League", b =>
                {
                    b.Property<string>("LeagueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeagueName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues", "ff");
                });

            modelBuilder.Entity("FantasyComponents.Manager", b =>
                {
                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers", "ff");
                });

            modelBuilder.Entity("FantasyComponents.Matchup", b =>
                {
                    b.Property<string>("MatchupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Roster1Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Roster2Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Week")
                        .HasColumnType("tinyint");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchupId");

                    b.HasIndex("Roster1Id")
                        .IsUnique()
                        .HasFilter("[Roster1Id] IS NOT NULL");

                    b.HasIndex("Roster2Id")
                        .IsUnique()
                        .HasFilter("[Roster2Id] IS NOT NULL");

                    b.HasIndex("SeasonId");

                    b.ToTable("Matchups", "ff");
                });

            modelBuilder.Entity("FantasyComponents.MatchupPlayer", b =>
                {
                    b.Property<string>("MatchupPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("ActualPoints")
                        .HasColumnType("real");

                    b.Property<string>("GameResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchupPosition")
                        .HasColumnType("int");

                    b.Property<string>("NFLPlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("ProjectedPoints")
                        .HasColumnType("real");

                    b.Property<string>("RosterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatBlock")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchupPlayerId");

                    b.HasIndex("NFLPlayerId");

                    b.HasIndex("RosterId");

                    b.ToTable("MatchupPlayers", "ff");
                });

            modelBuilder.Entity("FantasyComponents.MatchupRoster", b =>
                {
                    b.Property<string>("RosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("ActualScore")
                        .HasColumnType("real");

                    b.Property<string>("MatchupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ProjectedScore")
                        .HasColumnType("real");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RosterId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchupRosters", "ff");
                });

            modelBuilder.Entity("FantasyComponents.NFLPlayer", b =>
                {
                    b.Property<string>("NFLPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NFLPosition")
                        .HasColumnType("int");

                    b.Property<string>("PFRUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamsString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Teams");

                    b.Property<int?>("YahooId")
                        .HasColumnType("int");

                    b.HasKey("NFLPlayerId");

                    b.ToTable("NFLPlayers", "ff");
                });

            modelBuilder.Entity("FantasyComponents.Season", b =>
                {
                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeagueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeasonLeagueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Settings");

                    b.Property<int>("YahooLeagueId")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("SeasonId");

                    b.HasAlternateKey("YahooLeagueId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Seasons", "ff");
                });

            modelBuilder.Entity("FantasyComponents.Team", b =>
                {
                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short?>("FinalRank")
                        .HasColumnType("smallint");

                    b.Property<short>("Losses")
                        .HasColumnType("smallint");

                    b.Property<bool?>("MadePlayoffs")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("MovesMade")
                        .HasColumnType("smallint");

                    b.Property<int?>("NameRating")
                        .HasColumnType("int");

                    b.Property<short?>("RegularSeasonRank")
                        .HasColumnType("smallint");

                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeasonRating")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Ties")
                        .HasColumnType("smallint");

                    b.Property<short>("TradesMade")
                        .HasColumnType("smallint");

                    b.Property<short>("Wins")
                        .HasColumnType("smallint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("TeamId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("ManagerSeasons", "ff");
                });

            modelBuilder.Entity("FantasyComponents.Draft", b =>
                {
                    b.HasOne("FantasyComponents.Season", null)
                        .WithOne("Draft")
                        .HasForeignKey("FantasyComponents.Draft", "SeasonId");
                });

            modelBuilder.Entity("FantasyComponents.DraftedPlayer", b =>
                {
                    b.HasOne("FantasyComponents.NFLPlayer", "NFLPlayer")
                        .WithMany()
                        .HasForeignKey("NFLPlayerId");

                    b.HasOne("FantasyComponents.Team", null)
                        .WithMany("DraftedPlayers")
                        .HasForeignKey("TeamId");

                    b.Navigation("NFLPlayer");
                });

            modelBuilder.Entity("FantasyComponents.Matchup", b =>
                {
                    b.HasOne("FantasyComponents.MatchupRoster", "Roster1")
                        .WithOne()
                        .HasForeignKey("FantasyComponents.Matchup", "Roster1Id");

                    b.HasOne("FantasyComponents.MatchupRoster", "Roster2")
                        .WithOne()
                        .HasForeignKey("FantasyComponents.Matchup", "Roster2Id");

                    b.HasOne("FantasyComponents.Season", null)
                        .WithMany("Matchups")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Roster1");

                    b.Navigation("Roster2");
                });

            modelBuilder.Entity("FantasyComponents.MatchupPlayer", b =>
                {
                    b.HasOne("FantasyComponents.NFLPlayer", "NFLPlayer")
                        .WithMany()
                        .HasForeignKey("NFLPlayerId");

                    b.HasOne("FantasyComponents.MatchupRoster", null)
                        .WithMany("MatchupPlayers")
                        .HasForeignKey("RosterId");

                    b.Navigation("NFLPlayer");
                });

            modelBuilder.Entity("FantasyComponents.MatchupRoster", b =>
                {
                    b.HasOne("FantasyComponents.Team", null)
                        .WithMany("Rosters")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("FantasyComponents.Season", b =>
                {
                    b.HasOne("FantasyComponents.League", null)
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("FantasyComponents.Team", b =>
                {
                    b.HasOne("FantasyComponents.Manager", null)
                        .WithMany("ManagerSeasons")
                        .HasForeignKey("ManagerId");

                    b.HasOne("FantasyComponents.Season", null)
                        .WithMany("ManagerSeasons")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("FantasyComponents.League", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("FantasyComponents.Manager", b =>
                {
                    b.Navigation("ManagerSeasons");
                });

            modelBuilder.Entity("FantasyComponents.MatchupRoster", b =>
                {
                    b.Navigation("MatchupPlayers");
                });

            modelBuilder.Entity("FantasyComponents.Season", b =>
                {
                    b.Navigation("Draft");

                    b.Navigation("ManagerSeasons");

                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("FantasyComponents.Team", b =>
                {
                    b.Navigation("DraftedPlayers");

                    b.Navigation("Rosters");
                });
#pragma warning restore 612, 618
        }
    }
}
